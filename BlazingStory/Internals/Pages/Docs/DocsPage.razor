@using System.Text.RegularExpressions;

<PageTitle>@this._PageTitle</PageTitle>

<div class="docs-page stack vertical">

    <ToolBar>
        <IconButton Icon="SvgIconType.Grid" Title="Apply a grid to the preview" />
        <IconButton Icon="SvgIconType.Outlines" Title="Apply outlines to the preview" />
    </ToolBar>

    <div class="docs-main fill">
        @if (this._StoryComponent != null)
        {
            <h1>@this._StoryComponent.Title.Split('/').Last()</h1>

            <h2>Stories</h2>

            foreach (var story in this._StoryComponent.Stories)
            {
                <div @key="story.NavigationPath">

                    <h3>@story.Name</h3>

                    <StoryPreview Story="story" />
                </div>
            }
        }
    </div>
</div>

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; init; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; init; }

    private string? _CurrentNavigationPath;

    private string _PageTitle = "";

    private StoryContainer? _StoryComponent;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (this._CurrentNavigationPath != this.RouteData.Parameter)
        {
            this._CurrentNavigationPath = this.RouteData.Parameter;
            var navigationPath = Regex.Replace(this.RouteData.Parameter, "--docs$", "");
            if (!this.StoriesStore.TryGetComponentByPath(navigationPath, out var component)) return;

            this._StoryComponent = component;
            this._PageTitle = string.Join(" / ", component.Title.Split('/')) + " - Docs - " + BlazingStoryApp.Title;
        }
    }
}