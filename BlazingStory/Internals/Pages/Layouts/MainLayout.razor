@inherits LayoutComponentBase
@using Toolbelt.Blazor.HotKeys2

<HeadContent>
    <link rel="stylesheet" href="_content/BlazingStory/css/styles.min.css" />
</HeadContent>

<SvgIcons />

@if (this._Ready)
{
    <PathQueryRouter>
        <SplitContainer Class="@CssClass("main-layout", this._SidBarVisibilityState)" @bind-FirstPaneSize="_SideBarSize" @bind-FirstPaneSize:after="OnSideBarSizeChanged" FirstPaneMinSize="200" SecondPaneMinSize="210">

            <FirstPane>
                <div class="sidebar-container fill">
                    <SideBar />
                </div>
            </FirstPane>

            <SecondPane>
                @Body
            </SecondPane>
        </SplitContainer>
    </PathQueryRouter>
}

@code
{
    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private bool _Ready = false;

    private HelperScript HelperScript = default!;

    private int _SideBarSize = 210;

    private string SideBarSizeKeyName => this.GetType().Name + "." + nameof(_SideBarSize);

    private Command? _SideBarVisibleCommand;

    private Command? _GoFullScreenCommand;

    private readonly Subscriptions _Subscriptions = new();

    private enum SidBarVisibilityStates
    {
        SidebarShowing,
        SidebarShown,
        SidebarHiding,
        SidebarHidden,
    }

    private SidBarVisibilityStates _SidBarVisibilityState = SidBarVisibilityStates.SidebarShown;

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var commandService = await this.ConfigureCommandsAsync(this.Services);

            this._SideBarVisibleCommand = commandService[CommandType.SideBarVisible]!;
            this._GoFullScreenCommand = commandService[CommandType.GoFullScreen]!;
            this._Subscriptions.Add(this._SideBarVisibleCommand.Subscribe(this.OnToggleSideBarVisible));
            this._Subscriptions.Add(this._GoFullScreenCommand.Subscribe(this.OnToggleFullscreen));
            this._SidBarVisibilityState = this.GetSidebarVisible() ? SidBarVisibilityStates.SidebarShown : SidBarVisibilityStates.SidebarHidden;

            this._Ready = true;
            this.StateHasChanged();

            await this.HelperScript.SetupKeyDownReceiverAsync();
            this._SideBarSize = await this.HelperScript.GetLocalStorageItemAsync(this.SideBarSizeKeyName, this._SideBarSize);
            this.StateHasChanged();
        }

        else
        {
            if (this._SidBarVisibilityState == SidBarVisibilityStates.SidebarHiding)
            {
                this._SidBarVisibilityState = SidBarVisibilityStates.SidebarHidden;
                this.StateHasChanged();
            }
            else if (this._SidBarVisibilityState == SidBarVisibilityStates.SidebarShowing)
            {
                await Task.Delay(100);
                this._SidBarVisibilityState = SidBarVisibilityStates.SidebarShown;
                this.StateHasChanged();
            }
        }
    }

    private async ValueTask<CommandService> ConfigureCommandsAsync(IServiceProvider services)
    {
        var commandServce = services.GetRequiredService<CommandService>();
        await commandServce.EnsureCommandsAsync(() => new Command[]
        {
            new(CommandType.AboutYourBlazingStory, default, "About your Blazing Story"),
            new(CommandType.ReleaseNotes, default, "Release notes"),
            new(CommandType.KeyboardShortcuts, new(ModCode.Ctrl|ModCode.Shift, Code.Comma), "Keyboard shortcuts"),

            new(CommandType.SideBarVisible, new(Code.S), "Show sidebar", flag: true),
            new(CommandType.ToolBarVisible, new(Code.T), "Show toolbar", flag: true),
            new(CommandType.AddonPanelVisible, new(Code.A), "Show addons", flag: true),
            new(CommandType.AddonPanelOrientation, new(Code.D), "Change addons orientation"),
            new(CommandType.GoFullScreen, new(Code.F), "Go full screen", flag: false),
            new(CommandType.GoSearch, new(Code.Slash), "Search"),
            new(CommandType.PreviousComponent, new(ModCode.Alt, Code.ArrowUp), "Previous component"),
            new(CommandType.NextComponent, new(ModCode.Alt, Code.ArrowDown), "Next component"),
            new(CommandType.PreviousStory, new(ModCode.Alt, Code.ArrowLeft), "Previous story"),
            new(CommandType.NextStory, new(ModCode.Alt, Code.ArrowRight), "Next story"),
            new(CommandType.CollapseAll, new(ModCode.Ctrl|ModCode.Shift, Code.ArrowUp), "Collapse all"),
        });
        return commandServce;
    }

    private async Task OnSideBarSizeChanged()
    {
        await this.HelperScript.SetLocalStorageItemAsync(this.SideBarSizeKeyName, _SideBarSize);
    }

    private ValueTask OnToggleSideBarVisible() => this.ToggleSideBarVisibliy(this._SideBarVisibleCommand);

    private ValueTask OnToggleFullscreen() => this.ToggleSideBarVisibliy(this._GoFullScreenCommand);

    private async ValueTask ToggleSideBarVisibliy(Command? command)
    {
        if (command == null) return;
        command.ToggleFlag();
        this._SidBarVisibilityState = this.GetSidebarVisible() ? SidBarVisibilityStates.SidebarShowing : SidBarVisibilityStates.SidebarHiding;
        await ValueTask.CompletedTask;
    }

    private bool GetSidebarVisible() => (this._SideBarVisibleCommand?.Flag ?? true) && !(this._GoFullScreenCommand?.Flag ?? false);
}