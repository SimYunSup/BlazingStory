<div class="controls-panel">
    <table>
        <thead>
            <tr>
                <th class="name">Name</th>
                @if (this.ShowDetails)
                {
                    <th class="description">Description</th>
                    <th class="default">Default</th>
                }
                <th class="control">
                    <span>Control</span>
                    <IconButton Icon="SvgIconType.Reset" Class="reset-button" Title="Reset controls" OnClick="ResetControls" />
                </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var parameter in this.GetParameters())
            {
                var argumentValue = GetArgumentValue(parameter.Name);
                var key = this.GetKey(parameter);
                <tr @key="key">

                    <td class="name">
                        <span>@parameter.Name</span>
                        @if (parameter.Required)
                        {
                            <span class="required" title="Required">*</span>
                        }
                    </td>

                    @if (this.ShowDetails)
                    {
                        <td class="description">
                            <!-- TODO: Description -->
                            <div class="parameter-summary">
                                @parameter.Summary
                            </div>

                            <div class="parameter-type-holder">
                                <span class="parameter-type">
                                    @parameter.Type.Name
                                </span>
                            </div>
                        </td>
                        <td class="default">
                            <!-- TODO: Default -->
                        </td>
                    }

                    <td class="control">

                        @if (parameter.Type == typeof(string))
                        {
                            if (parameter.Control is ControlType.Color)
                            {
                                var colorValue = (argumentValue ?? parameter.DefaultValue) as string;
                                <ColorInput Value="@colorValue" PlaceHolder="Choose color..." OnInput="@((args) => OnInputAsync(args.Value, parameter))" />
                            }
                            else
                            {
                                <TextArea PlaceHolder="Edit string..." Value="@(argumentValue as string)" OnInput="@((args) => OnInputAsync(args.Value, parameter))" />
                            }
                        }

                        else if (parameter.Type == typeof(bool))
                        {
                            if (argumentValue == null)
                            {
                                <SquareButton Text="Set boolean" OnClick="@(() => OnInputAsync(false, parameter))" />
                            }
                            else
                            {
                                var boolValue = (bool)argumentValue;
                                <ToggleButton Value="boolValue" OnChange="@(() => OnInputAsync(!boolValue, parameter))" />
                            }
                        }

                        else if (parameter.Type == typeof(int))
                        {
                            if (argumentValue == null)
                            {
                                <SquareButton Text="Set number" OnClick="@(() => OnInputAsync(0, parameter))" />
                            }
                            else
                            {
                                var numValue = (int)argumentValue;
                                <NumberInput Value="numValue" PlaceHolder="Edit number..." OnInput="@((arg) => int.TryParse(arg.Value?.ToString(), out var n) ? OnInputAsync(n, parameter) : Task.CompletedTask)" />
                            }
                        }

                        else if (parameter.Type.IsEnum)
                        {
                            var enumValues = Enum.GetValues(parameter.Type);
                            if (parameter.Control is ControlType.Select)
                            {
                                <Select Value="argumentValue" Items="enumValues" OnChange="@((arg) => Enum.TryParse(parameter.Type,arg.Value as string, out var enumValue)? OnInputAsync(enumValue, parameter) : Task.CompletedTask)" />
                            }
                            else
                            {
                                <RadioGroup Name="key" Value="argumentValue" Items="enumValues" OnChange="@((arg) => Enum.TryParse(parameter.Type,arg.Value as string, out var enumValue)? OnInputAsync(enumValue, parameter) : Task.CompletedTask)" />
                            }
                        }

                        else
                        {
                            <span>
                                @(argumentValue?.ToString() ?? "-")
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    [Parameter, EditorRequired]
    public Story? Story { get; set; }

    [Parameter]
    public bool ShowDetails { get; set; }

    protected override async Task OnInitializedAsync()
    {
        foreach (var param in this.GetParameters())
        {
            await param.UpdateSummaryFromXmlDocCommentAsync();
        }
    }

    private IEnumerable<ComponentParameter> GetParameters()
    {
        return this.Story?.Context.Parameters ?? Enumerable.Empty<ComponentParameter>();
    }

    private string GetKey(ComponentParameter parameter)
    {
        return (this.Story?.NavigationPath ?? "") + ":" + parameter.Name;
    }

    private object? GetArgumentValue(string parameterName)
    {
        return this.Story?.Context.Args.TryGetValue(parameterName, out var value) == true ? value : null;
    }

    private async Task ResetControls()
    {
        if (this.Story == null) return;
        await this.Story.Context.ResetArgumentsAsync();
    }

    private async Task OnInputAsync(object? value, ComponentParameter parameter)
    {
        if (this.Story == null) return;
        await this.Story.Context.AddOrUpdateArgumentAsync(parameter.Name, value);
    }
}