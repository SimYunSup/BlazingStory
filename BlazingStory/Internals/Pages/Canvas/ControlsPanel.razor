<div class="controls-panel">
    <table>
        <thead><tr><th>Name</th><th>Control</th></tr></thead>

        <tbody>
            @foreach (var parameter in this.GetParameters())
            {
                var argumentValue = GetArgumentValue(parameter.Name);
                var key = this.GetKey(parameter);
                <tr @key="key">
                    <td>
                        <span>@parameter.Name</span>
                        @if (parameter.Required)
                        {
                            <span class="required" title="Required">*</span>
                        }
                    </td>
                    <td>

                        @if (parameter.Type == typeof(String))
                        {
                            <textarea rows="1" @oninput="@((args) => OnInputAsync(args.Value, parameter))">@(argumentValue ?? "")</textarea>
                        }

                        else if (parameter.Type.IsEnum)
                        {
                            var enumValues = Enum.GetValues(parameter.Type);
                            foreach (var enumValue in enumValues)
                            {
                                var isChecked = argumentValue?.Equals(enumValue) == true;
                                <div>
                                    <label>
                                        <input type="radio" name="@key" value="@enumValue" checked="@isChecked" @onchange="@(() => OnInputAsync(enumValue, parameter))">
                                        <span>@enumValue</span>
                                    </label>
                                </div>
                            }
                        }

                        else
                        {
                            <span>
                                @(argumentValue?.ToString() ?? "-")
                            </span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code
{
    [Parameter, EditorRequired]
    public Story? Story { get; set; }

    private IEnumerable<ComponentParameter> GetParameters()
    {
        return this.Story?.Context.Parameters ?? Enumerable.Empty<ComponentParameter>();
    }

    private string GetKey(ComponentParameter parameter)
    {
        return (this.Story?.NavigationPath ?? "") + ":" + parameter.Name;
    }

    private object? GetArgumentValue(string parameterName)
    {
        return this.Story?.Context.Args.TryGetValue(parameterName, out var value) == true ? value : null;
    }

    private async Task OnInputAsync(object? value, ComponentParameter parameter)
    {
        if (this.Story == null) return;
        await this.Story.Context.AddOrUpdateArgumentAsync(parameter.Name, value);
    }
}