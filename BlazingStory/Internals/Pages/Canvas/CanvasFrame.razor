@using System.Web
@using System.Collections.Specialized;
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<CanvasFrame> Logger

@if (this._EnableGrid)
{
    <style>
        body {
            background-size: 100px 100px, 100px 100px, 20px 20px, 20px 20px !important;
            background-position: 0px 0px, 0px 0px, 0px 0px, 0px 0px !important;
            background-blend-mode: difference !important;
            background-image: linear-gradient(rgba(130, 130, 130, 0.5) 1px, transparent 1px), linear-gradient(90deg, rgba(130, 130, 130, 0.5) 1px, transparent 1px), linear-gradient(rgba(130, 130, 130, 0.25) 1px, transparent 1px), linear-gradient(90deg, rgba(130, 130, 130, 0.25) 1px, transparent 1px) !important;
        }
    </style>
}

@if (this._Story != null)
{
    @this._Story.RenderFragment(this._Story.Context)
}

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; set; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; set; }

    private Story? _Story;

    private bool _EnableGrid = false;

    protected override void OnInitialized()
    {
        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story)) return;
        if (Object.ReferenceEquals(this._Story, story)) return;
        this._Story = story;
        await this.UpdateComponentStatesFromUrlAsync();
        this.StateHasChanged();
    }

    private string _ComponentArgsString = "";

    private string _GlobalEffectsString = "";

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        this.UpdateComponentStatesFromUrlAsync().AndLogException(this.Logger);
    }

    private async ValueTask UpdateComponentStatesFromUrlAsync()
    {
        var queryStrings = HttpUtility.ParseQueryString(new Uri(this.NavigationManager.Uri).Query);
        await this.UpdateComponentArgsFromUrlAsync(queryStrings);
        await this.UpdateGlobalEffectsFromUrlAsync(queryStrings);
    }

    private async ValueTask UpdateComponentArgsFromUrlAsync(NameValueCollection queryStrings)
    {
        if (this._Story == null) return;

        var componentArgsString = queryStrings["args"] ?? "";
        if (this._ComponentArgsString == componentArgsString) return;
        this._ComponentArgsString = componentArgsString;

        await this._Story.Context.ResetArgumentsAsync();

        var componentArgs = UriParameterKit.DecodeKeyValues(this._ComponentArgsString);
        var parameters = this._Story.Context.Parameters;
        foreach (var arg in componentArgs)
        {
            var parameter = parameters.FirstOrDefault(p => p.Name == arg.Key);
            if (parameter == null) continue;
            if (!this.TryConvertType(parameter.Type, arg.Value, out var value)) continue;

            await this._Story.Context.AddOrUpdateArgumentAsync(arg.Key, value);
        }
        this.StateHasChanged();
    }

    private bool TryConvertType(Type targetType, string valueString, [NotNullWhen(true)] out object? value)
    {
        if (targetType == typeof(string))
        {
            value = valueString;
            return true;
        }

        else if (targetType == typeof(bool))
        {
            if (bool.TryParse(valueString, out var boolValue))
            {
                value = boolValue;
                return true;
            }
        }

        else if (targetType == typeof(int))
        {
            if (int.TryParse(valueString, out var numValue))
            {
                value = numValue;
                return true;
            }
        }

        else if (targetType.IsEnum)
        {
            if (Enum.TryParse(targetType, valueString, out var enumValue))
            {
                value = enumValue;
                return true;
            }
        }

        value = null;
        return false;
    }


    private async ValueTask UpdateGlobalEffectsFromUrlAsync(NameValueCollection queryStrings)
    {
        var globalEffectsString = queryStrings["globals"] ?? "";
        if (this._GlobalEffectsString == globalEffectsString) return;

        var globalEffects = UriParameterKit.DecodeKeyValues(globalEffectsString);
        this._EnableGrid = bool.TryParse(globalEffects["background.grid"]?.ToString(), out var b) ? b : false;

        this.StateHasChanged();
        await ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        this.NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
    }
}