@using System.Web
@using System.Collections.Specialized;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<CanvasFrame> Logger
@inject NavigationManager NavigationManager

@if (this._Story == null)
{
    <CanvasFrameNothingToAddress />
}
else
{
    <LayoutView Layout="@(this.BlazingStoryApp.DefaultLayout ?? typeof(NullLayout))">
        <LayoutView Layout="@(this._Story.StoriesLayout ?? typeof(NullLayout))">
            <LayoutView Layout="@(this._Story.StoryLayout ?? typeof(NullLayout))">

                @this._Story.RenderFragment(this._Story.Context)

            </LayoutView>
        </LayoutView>
    </LayoutView>
}

@if (this._EnableMeasure)
{
    <MeasureLayer />
}

@code
{
    [CascadingParameter]
    protected StoriesStore StoriesStore { get; init; } = default!;

    [CascadingParameter]
    protected QueryRouteData RouteData { get; init; } = default!;

    [CascadingParameter]
    protected BlazingStoryApp BlazingStoryApp { get; init; } = default!;

    private readonly JSModule _JSModule;

    private Story? _Story;

    private bool _EnableMeasure = false;

    /// <summary>
    /// Constructor
    /// </summary>
    public CanvasFrame()
    {
        this._JSModule = new(() => this.JSRuntime, "Internals/Pages/Canvas/CanvasFrame.razor.js");
    }

    protected override void OnInitialized()
    {
        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story)) return;
        if (Object.ReferenceEquals(this._Story, story)) return;

        if (this._Story != null) this._Story.Context.ShouldRender -= StoryContext_ShouldRender;
        this._Story = story;
        this._Story.Context.ShouldRender += StoryContext_ShouldRender;

        await this.UpdateComponentStatesFromUrlAsync();
        this.StateHasChanged();
    }

    /// <summary>
    /// When the state of the story has been changed, this canvas frame should be re-rendered.
    /// </summary>
    private void StoryContext_ShouldRender(object? sender, EventArgs e)
    {
        this.StateHasChanged();
    }

    private string _ComponentArgsString = "";

    private string _GlobalEffectsString = "";

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        this.UpdateComponentStatesFromUrlAsync().AndLogException(this.Logger);
    }

    private async ValueTask UpdateComponentStatesFromUrlAsync()
    {
        var queryStrings = HttpUtility.ParseQueryString(new Uri(this.NavigationManager.Uri).Query);
        await this.UpdateComponentArgsFromUrlAsync(queryStrings);
        await this.UpdateGlobalEffectsFromUrlAsync(queryStrings);
    }

    private async ValueTask UpdateComponentArgsFromUrlAsync(NameValueCollection queryStrings)
    {
        if (this._Story == null) return;

        var componentArgsString = queryStrings["args"] ?? "";
        if (this._ComponentArgsString == componentArgsString) return;
        this._ComponentArgsString = componentArgsString;

        await this._Story.Context.ResetArgumentsAsync();

        var componentArgs = UriParameterKit.DecodeKeyValues(this._ComponentArgsString);
        var parameters = this._Story.Context.Parameters;
        foreach (var arg in componentArgs)
        {
            var parameter = parameters.FirstOrDefault(p => p.Name == arg.Key);
            if (parameter == null) continue;
            if (!TypeUtility.TryConvertType(parameter.Type, arg.Value, out var value)) continue;

            await this._Story.Context.AddOrUpdateArgumentAsync(arg.Key, value);
        }
        this.StateHasChanged();
    }

    private async ValueTask UpdateGlobalEffectsFromUrlAsync(NameValueCollection queryStrings)
    {
        var globalEffectsString = queryStrings["globals"] ?? "";
        if (this._GlobalEffectsString == globalEffectsString) return;
        this._GlobalEffectsString = globalEffectsString;

        var globalEffects = UriParameterKit.DecodeKeyValues(globalEffectsString);
        var background = globalEffects.TryGetValue("backgrounds.value", out var backgroundStr) ? backgroundStr : "transparent";
        var enableGrid = globalEffects.TryGetValue("backgrounds.grid", out var gridStr) ? bool.TryParse(gridStr, out var grid) ? grid : false : false;
        var enableOutline = globalEffects.TryGetValue("outline", out var outlineStr) ? bool.TryParse(outlineStr, out var outline) ? outline : false : false;
        this._EnableMeasure = globalEffects.TryGetValue("measureEnabled", out var measureStr) ? bool.TryParse(measureStr, out var measure) ? measure : false : false;

        var basePath = "./_content/BlazingStory/css/preview/";
        var styleDescripters = new[] {
            new { Id = "addon-background-grid", Enable = enableGrid, Href = basePath + "background-grid.min.css" },
            new { Id = "addon-outline", Enable = enableOutline, Href = basePath + "outline.min.css" }};
        await this._JSModule.InvokeVoidAsync("ensurePreviewStyle", new object[] { background, styleDescripters });

        this.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (this._Story != null) this._Story.Context.ShouldRender -= StoryContext_ShouldRender;
        this.NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
        await this._JSModule.DisposeAsync();
    }
}