@using System.Web
@using System.Collections.Specialized;
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<CanvasFrame> Logger
@inject NavigationManager NavigationManager

@if (this._Story != null)
{
    @this._Story.RenderFragment(this._Story.Context)
}

@if (this._EnableMeasure)
{
    <MeasureLayer />
}

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; set; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; set; }

    private readonly JSModule _JSModule;

    private Story? _Story;

    private bool _EnableMeasure = false;

    /// <summary>
    /// Constructor
    /// </summary>
    public CanvasFrame()
    {
        this._JSModule = new(() => this.JSRuntime, "Internals/Pages/Canvas/CanvasFrame.razor.js");
    }

    protected override void OnInitialized()
    {
        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story)) return;
        if (Object.ReferenceEquals(this._Story, story)) return;
        this._Story = story;
        await this.UpdateComponentStatesFromUrlAsync();
        this.StateHasChanged();
    }

    private string _ComponentArgsString = "";

    private string _GlobalEffectsString = "";

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        this.UpdateComponentStatesFromUrlAsync().AndLogException(this.Logger);
    }

    private async ValueTask UpdateComponentStatesFromUrlAsync()
    {
        var queryStrings = HttpUtility.ParseQueryString(new Uri(this.NavigationManager.Uri).Query);
        await this.UpdateComponentArgsFromUrlAsync(queryStrings);
        await this.UpdateGlobalEffectsFromUrlAsync(queryStrings);
    }

    private async ValueTask UpdateComponentArgsFromUrlAsync(NameValueCollection queryStrings)
    {
        if (this._Story == null) return;

        var componentArgsString = queryStrings["args"] ?? "";
        if (this._ComponentArgsString == componentArgsString) return;
        this._ComponentArgsString = componentArgsString;

        await this._Story.Context.ResetArgumentsAsync();

        var componentArgs = UriParameterKit.DecodeKeyValues(this._ComponentArgsString);
        var parameters = this._Story.Context.Parameters;
        foreach (var arg in componentArgs)
        {
            var parameter = parameters.FirstOrDefault(p => p.Name == arg.Key);
            if (parameter == null) continue;
            if (!this.TryConvertType(parameter.Type, arg.Value, out var value)) continue;

            await this._Story.Context.AddOrUpdateArgumentAsync(arg.Key, value);
        }
        this.StateHasChanged();
    }

    private bool TryConvertType(Type targetType, string valueString, [NotNullWhen(true)] out object? value)
    {
        if (targetType == typeof(string))
        {
            value = valueString;
            return true;
        }

        else if (targetType == typeof(bool))
        {
            if (bool.TryParse(valueString, out var boolValue))
            {
                value = boolValue;
                return true;
            }
        }

        else if (targetType == typeof(int))
        {
            if (int.TryParse(valueString, out var numValue))
            {
                value = numValue;
                return true;
            }
        }

        else if (targetType.IsEnum)
        {
            if (Enum.TryParse(targetType, valueString, out var enumValue))
            {
                value = enumValue;
                return true;
            }
        }

        value = null;
        return false;
    }


    private async ValueTask UpdateGlobalEffectsFromUrlAsync(NameValueCollection queryStrings)
    {
        var globalEffectsString = queryStrings["globals"] ?? "";
        if (this._GlobalEffectsString == globalEffectsString) return;
        this._GlobalEffectsString = globalEffectsString;

        var globalEffects = UriParameterKit.DecodeKeyValues(globalEffectsString);
        var enableGrid = globalEffects.TryGetValue("background.grid", out var gridStr) ? bool.TryParse(gridStr, out var grid) ? grid : false : false;
        var enableOutline = globalEffects.TryGetValue("outline", out var outlineStr) ? bool.TryParse(outlineStr, out var outline) ? outline : false : false;
        this._EnableMeasure = globalEffects.TryGetValue("measureEnabled", out var measureStr) ? bool.TryParse(measureStr, out var measure) ? measure : false : false;

        var basePath = "./_content/BlazingStory/css/preview/";
        var styleDescripters = new[] {
            new { Id = "addon-background-grid", Enable = enableGrid, Href = basePath + "background-grid.min.css" },
            new { Id = "addon-outline", Enable = enableOutline, Href = basePath + "outline.min.css" }};
        await this._JSModule.InvokeVoidAsync("ensurePreviewStyle", new object[] { styleDescripters });
        
        this.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        this.NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
        await this._JSModule.DisposeAsync();
    }
}