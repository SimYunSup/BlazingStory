@if (Parameter?.Type == typeof(string))
{
    if (Parameter.Control is ControlType.Color)
    {
        var colorValue = (Value ?? Parameter.DefaultValue) as string;
        <ColorInput Value="@colorValue" PlaceHolder="Choose color..." OnInput="@((args) => OnInputAsync(args.Value))" />
    }
    else
    {
        <TextArea PlaceHolder="Edit string..." Value="@(Value as string)" OnInput="@((args) => OnInputAsync(args.Value))" />
    }
}

else if (Parameter?.Type == typeof(bool))
{
    if (Value == null)
    {
        <SquareButton Text="Set boolean" OnClick="@(() => OnInputAsync(false))" />
    }
    else
    {
        var boolValue = (bool)Value;
        <ToggleButton Value="boolValue" OnChange="@(() => OnInputAsync(!boolValue))" />
    }
}

else if (Parameter?.Type == typeof(int))
{
    if (Value == null)
    {
        <SquareButton Text="Set number" OnClick="@(() => OnInputAsync(0))" />
    }
    else
    {
        var numValue = (int)Value;
        <NumberInput Value="numValue" PlaceHolder="Edit number..." OnInput="@((arg) => int.TryParse(arg.Value?.ToString(), out var n) ? OnInputAsync(n) : Task.CompletedTask)" />
    }
}

else if (Parameter?.Type.IsEnum == true)
{
    var enumValues = Enum.GetValues(Parameter.Type);
    if (Parameter.Control is ControlType.Select)
    {
        <Select Value="Value" Items="enumValues" OnChange="@((arg) => Enum.TryParse(Parameter.Type,arg.Value as string, out var enumValue)? OnInputAsync(enumValue) : Task.CompletedTask)" />
    }
    else
    {
        <RadioGroup Name="@Key" Value="Value" Items="enumValues" OnChange="@((arg) => Enum.TryParse(Parameter.Type,arg.Value as string, out var enumValue)? OnInputAsync(enumValue) : Task.CompletedTask)" />
    }
}

else
{
    <span>
        @(Value?.ToString() ?? "-")
    </span>
}

@code
{
    [Parameter, EditorRequired]
    public string? Key { get; set; }

    [Parameter, EditorRequired]
    public ComponentParameter? Parameter { get; set; }

    [Parameter, EditorRequired]
    public object? Value { get; set; }

    [Parameter]
    public EventCallback<ParameterInputEventArgs> OnInput { get; set; }

    private async Task OnInputAsync(object? value)
    {
        if (this.Parameter == null) throw new NullReferenceException("Parameter is null.");
        await this.OnInput.InvokeAsync(new ParameterInputEventArgs(value, Parameter));
    }
}