@using BlazingStory.Internals.Pages.Canvas.Controls

<div class="add-on-panel stack vertical">

    <ToolBar>
        <TabButtonGroup>
            @foreach (var descriptor in this._AddonPanelDescriptors)
            {
                <TabButton Active="descriptor == this._CurrentAddonPanel" OnClick="() => this.OnSelectAddonPanel(descriptor)">
                    @descriptor.Name
                    @if (descriptor.Badge != "")
                    {
                        <span class="badge">@descriptor.Badge</span>
                    }
                </TabButton>
            }

            @* TODO: Not implemented yet. *@

            @*
            <TabButton>
            Actions
            </TabButton>
            <TabButton>
            Interactions
            </TabButton>
            *@

        </TabButtonGroup>

        <Spacer />

        <IconButton Icon="this.ToggleOrientationButtonIcon" Command="this._Commands[CommandType.AddonPanelOrientation]" />
        <IconButton Icon="SvgIconType.CircleClose" Command="this._Commands[CommandType.AddonPanelVisible]" Title="Hide addons [{0}]" FlagStyle="false" />
    </ToolBar>

    <div class="fill add-on-panel-content">
        @if (_CurrentAddonPanel != null)
        {
            <DynamicComponent Type="_CurrentAddonPanel.PanelComponentType" Parameters="_AddonPanelParameters" />
        }
    </div>

</div>

@code
{
    [Parameter, EditorRequired]
    public Story? Story { get; set; }

    [Parameter]
    public SplitterOrientation SplitterOrientation { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private CommandService _Commands = default!;

    private readonly Dictionary<string, object> _AddonPanelParameters = new();

    private readonly IEnumerable<AddonPanelDescriptor> _AddonPanelDescriptors = new AddonPanelDescriptor[]
    {
        new ControlsPanelDescriptor()
    };

    private AddonPanelDescriptor? _CurrentAddonPanel;

    private SvgIconType ToggleOrientationButtonIcon => this.SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.RightSidePane,
        _ => SvgIconType.BottomSidePane
    };

    protected override void OnInitialized()
    {
        this._Commands = this.Services.GetRequiredService<CommandService>();
        this._CurrentAddonPanel = this._AddonPanelDescriptors.FirstOrDefault();

        if (this.Story != null)
        {
            this._AddonPanelParameters.Add(nameof(Story), this.Story);

            foreach (var descriptor in this._AddonPanelDescriptors)
            {
                descriptor.Initialize(this.Story, this.Services);
            }
        }
    }

    private void OnSelectAddonPanel(AddonPanelDescriptor descriptor)
    {
        this._CurrentAddonPanel = descriptor;
    }
}