@using BlazingStory.Internals.Pages.Canvas.Controls
@implements IDisposable

<div class="add-on-panel fill stack vertical">

    <ToolBar>
        <TabButtonGroup>
            @foreach (var descriptor in this._AddonPanelDescriptors)
            {
                <TabButton Active="descriptor == this._ActiveAddonPanelDescriptor" OnClick="() => this.OnSelectAddonPanel(descriptor)">
                    @descriptor.Name
                    <Badge Text="@descriptor.Badge" />
                </TabButton>
            }
        </TabButtonGroup>

        <Spacer />

        <IconButton Icon="this.ToggleOrientationButtonIcon" Command="this._Commands[CommandType.AddonPanelOrientation]" />
        <IconButton Icon="SvgIconType.CircleClose" Command="this._Commands[CommandType.AddonPanelVisible]" Title="Hide addons [{0}]" FlagStyle="false" />
    </ToolBar>

    <div class="fill add-on-panel-content">
        @if (_ActiveAddonPanelDescriptor != null)
        {
            <DynamicComponent Type="_ActiveAddonPanelDescriptor.PanelComponentType" Parameters="_AddonPanelParameters" />
        }
    </div>

</div>

@code
{
        [Parameter, EditorRequired]
        public Story? Story { get; set; }

        [Parameter]
        public SplitterOrientation SplitterOrientation { get; set; }

        [CascadingParameter]
        internal IServiceProvider Services { get; init; } = default!;

    private CommandService _Commands = default!;

    private readonly Dictionary<string, object?> _AddonPanelParameters = new();

    private readonly IEnumerable<AddonPanelDescriptor> _AddonPanelDescriptors = new AddonPanelDescriptor[]
    {
        new ControlsPanelDescriptor(),
        // TODO: Not implemented yet.
        //new ActionsPanelDescriptor(),
        //new InteractionsPanelDescriptor()
    };

    private AddonPanelDescriptor? _ActiveAddonPanelDescriptor;

    private SvgIconType ToggleOrientationButtonIcon => this.SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.RightSidePane,
        _ => SvgIconType.BottomSidePane
    };

    protected override void OnParametersSet()
    {
        this._AddonPanelParameters["Story"] = this.Story;
        this._AddonPanelDescriptors.ForEach(descriptor => descriptor.SetParameters(this.Story, this.Services));
    }

    protected override void OnInitialized()
    {
        this._Commands = this.Services.GetRequiredService<CommandService>();
        this._ActiveAddonPanelDescriptor = this._AddonPanelDescriptors.First();
        this._AddonPanelDescriptors.ForEach(descriptor => descriptor.Updated += Descriptor_Updated);
    }

    private void Descriptor_Updated(object? sender, EventArgs args)
    {
        this.StateHasChanged();
    }

    private void OnSelectAddonPanel(AddonPanelDescriptor descriptor)
    {
        this._ActiveAddonPanelDescriptor = descriptor;
    }

    public void Dispose()
    {
        this._AddonPanelDescriptors.ForEach(descriptor => descriptor.Updated -= Descriptor_Updated);
    }
}