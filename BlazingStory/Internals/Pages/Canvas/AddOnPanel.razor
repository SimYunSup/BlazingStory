<div class="add-on-panel stack vertical">

    <ToolBar>
        <TabButtonGroup>
            <TabButton Active="true">
                Controls (@(this.GetParametersCount()))
            </TabButton>
            <TabButton>
                Actions
            </TabButton>
            <TabButton>
                Interactions
            </TabButton>
        </TabButtonGroup>

        <Spacer />

        <IconButton Icon="this.ToggleOrientationButtonIcon" Command="this._Commands[CommandType.AddonPanelOrientation]" />
        <IconButton Icon="SvgIconType.CircleClose" Command="this._Commands[CommandType.AddonPanelVisible]" Title="Hide addons [{0}]" />
    </ToolBar>

    <div class="fill add-on-panel-content">
        <ControlsPanel Story="this.Story" />
    </div>

</div>

@code
{
    [Parameter, EditorRequired]
    public Story? Story { get; set; }

    [Parameter]
    public SplitterOrientation SplitterOrientation { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private CommandService _Commands = default!;

    private SvgIconType ToggleOrientationButtonIcon => this.SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.RightSidePane,
        _ => SvgIconType.BottomSidePane
    };

    protected override void OnInitialized()
    {
        this._Commands = this.Services.GetRequiredService<CommandService>();
    }

    private int GetParametersCount()
    {
        return this.Story?.Context.Parameters
            .Where(p => p.Name != "EventCallback" && !p.Name.StartsWith("EventCallback`"))
            .Count() ?? 0;
    }
}