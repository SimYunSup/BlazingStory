@inherits ParameterControllerBase
@{
    var nullable = this.Parameter.TypeStructure.IsNullable;
}
@if (this.Value is Unknown || (!nullable && this.Value is null))
{
    <SquareButton Text="Set number" OnClick="ChangeToNonNull" />
}
else if (nullable)
{
    <div class="number-parameter-controller">

        <NullInputRadio Name="@(this.Key + "-value-type")" Checked="_NoValue" OnChange="() => this.OnInputAsync(null)" />

        <label class="input-value">
            <input type="radio" name="@(this.Key + "-value-type")" checked="@(!_NoValue)" @onchange="ChangeToNonNull" />
            <NumberInput Value="@_NumText"
                         PlaceHolder="Edit number..."
                         AllowDecimalPoint="_AllowDecimalPoint"
                         Required="!_NoValue"
                         InitialForcus="_InitialFocus"
                         OnInput="OnInputNumValue"
                         OnFocus="ChangeToNonNull" />
        </label>

    </div>
}
else
{
    <NumberInput Value="@_NumText"
                 PlaceHolder="Edit number..."
                 AllowDecimalPoint="_AllowDecimalPoint"
                 Required
                 InitialForcus="_InitialFocus"
                 OnInput="OnInputNumValue" />
}

@code
{
    private bool _NoValue;

    private bool _InitialFocus;

    private string? _NumText;

    private bool _AllowDecimalPoint;

    private bool TryConvertType(object? value, out object? convertedValue)
    {
        return TypeUtility.TryConvertType(this.Parameter.TypeStructure.PrimaryType, this.Parameter.TypeStructure, value?.ToString() ?? "", out convertedValue);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this._NumText = TryConvertType(this.Value, out var n) ? n?.ToString() : this._NumText;
        this._AllowDecimalPoint = TypeUtility.IsDecimalPointType(this.Parameter.TypeStructure.PrimaryType);
        this._NoValue = this.Value is null || this.Value is Unknown;
        if (this._InitialFocus && this._NoValue) this._InitialFocus = false;
    }

    private async Task OnInputNumValue(ChangeEventArgs arg)
    {
        this._NumText = arg.Value?.ToString();
        if (TryConvertType(arg.Value, out var n)) await this.OnInputAsync(n);
    }

    private async Task ChangeToNonNull()
    {
        this._InitialFocus = true;
        await this.OnInputNumValue(new() { Value = string.IsNullOrEmpty(this._NumText) ? "0" : this._NumText });
    }
}