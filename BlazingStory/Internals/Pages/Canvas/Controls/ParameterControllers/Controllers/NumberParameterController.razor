@inherits ParameterControllerBase
@{
    var nullable = this.Parameter.TypeStructure.IsNullable;
}
@if (this.Value is Unknown || (!nullable && this.Value is null))
{
    <SquareButton Text="Set number" OnClick="OnClickSetNumber" />
}
else if (nullable)
{
    var isNull = this.Value == null;

    <div class="number-parameter-controller">

        <NullInputRadio Name="@(this.Key + "-value-type")" Checked="isNull" OnChange="() => OnInputAsync(null)" />

        <label class="input-value">
            <input type="radio" name="@(this.Key + "-value-type")" checked="@(!isNull)" @onchange="() => this.OnInputNumValue(new(){ Value = this._NumText })" />
            <NumberInput Value="@_NumText"
                         PlaceHolder="Edit number..."
                         AllowDecimalPoint="_AllowDecimalPoint"
                         OnInput="OnInputNumValue"
                         OnFocus="() => this.OnInputNumValue(new(){ Value = this._NumText })" />
        </label>

    </div>
}
else
{
    <NumberInput Value="@_NumText" PlaceHolder="Edit number..." AllowDecimalPoint="_AllowDecimalPoint" OnInput="OnInputNumValue" />
}

@code
{
    private string? _NumText;

    private bool _AllowDecimalPoint;

    private bool TryConvertType(object? value, out object? convertedValue)
    {
        return TypeUtility.TryConvertType(this.Parameter.TypeStructure.PrimaryType, this.Parameter.TypeStructure, value?.ToString() ?? "", out convertedValue);
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        this._NumText = TryConvertType(this.Value, out var n) ? n?.ToString() : this._NumText;
        this._AllowDecimalPoint = TypeUtility.IsDecimalPointType(this.Parameter.TypeStructure.PrimaryType);
    }

    private async Task OnInputNumValue(ChangeEventArgs arg)
    {
        if (TryConvertType(arg.Value, out var n))
        {
            this._NumText = n?.ToString();
            await this.OnInputAsync(n);
        }
    }

    private async Task OnClickSetNumber()
    {
        await this.OnInputAsync(Activator.CreateInstance(this.Parameter.TypeStructure.PrimaryType));
    }
}