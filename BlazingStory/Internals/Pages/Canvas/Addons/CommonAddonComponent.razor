<CanvasToolbarRegistrar ToolbuttonOrder="this.ToolbuttonOrder">
    <IconButton Icon="this.Icon" OnClick="OnClickButton" Active="this._Enable" Title="@this.Title" />
</CanvasToolbarRegistrar>

@code
{
    [CascadingParameter]
    public required AddonsStore AddonsStore { get; init; }

    [CascadingParameter]
    public required IServiceProvider Services { get; init; }

    [Parameter, EditorRequired]
    public SvgIconType Icon { get; set; }

    [Parameter, EditorRequired]
    public string? Title { get; set; }

    [Parameter, EditorRequired]
    public string StorageKey { get; set; } = default!;

    [Parameter, EditorRequired]
    public string CanvasFrameArgumentName { get; set; } = default!;

    [Parameter, EditorRequired]
    public int ToolbuttonOrder { get; set; }

    private HelperScript HelperScript = default!;

    private bool _Enable = false;

    protected override async Task OnInitializedAsync()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        var enableStr = await this.HelperScript.GetLocalStorageItemAsync(StorageKey);
        this._Enable = bool.TryParse(enableStr, out var enable) ? enable : this._Enable;
        this.SetCanvasFrameArguments();
    }

    private async Task OnClickButton()
    {
        this._Enable = !this._Enable;
        this.SetCanvasFrameArguments();
        await this.HelperScript.SetLocalStorageItemAsync(StorageKey, this._Enable);
    }

    private void SetCanvasFrameArguments()
    {
        object? value = this._Enable ? "true" : null;
        this.AddonsStore.SetCanvasFrameArguments((this.CanvasFrameArgumentName, value));
    }
}