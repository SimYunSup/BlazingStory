<CanvasToolbarRegistrar>
    <style>
        .addons-change-size.none .icon-button .text {
            display: none;
        }
    </style>
    @{
        var active = this._CurrentState.Size != SizeType.None;
        var sizeDetail = this.SizeTypeToDetail[this._CurrentState.Size];
        var orientation = this._CurrentState.Orientation;
        var orientationInitial = orientation.ToString().Substring(0, 1);
        var size1 = orientation == Orientation.Portrait ? sizeDetail.ShrotSide : sizeDetail.LongSide;
        var size2 = orientation == Orientation.Portrait ? sizeDetail.LongSide : sizeDetail.ShrotSide;
    }
    <PopupMenu MarginTop="6" Class="@CssClass("addons-change-size", this._CurrentState.Size)">
        <Trigger>
            <IconButton Icon="SvgIconType.ChangeSize" Title="Change the size of the preview" Active="active">
                @if (active)
                {
                    <text>@sizeDetail.DisplayName (@orientationInitial)</text>
                }
            </IconButton>
        </Trigger>
        <MenuItems>
            @if (active)
            {
                <MenuItem OnClick="@(() => OnClickSize(SizeType.None))">
                    Reset viewport
                </MenuItem>
            }
            <MenuItem OnClick="@(() => OnClickSize(SizeType.SmallMobile))">
                Small mobile
            </MenuItem>
            <MenuItem OnClick="@(() => OnClickSize(SizeType.LargeMobile))">
                Large mobile
            </MenuItem>
            <MenuItem OnClick="@(() => OnClickSize(SizeType.Tablet))">
                Tablet
            </MenuItem>
        </MenuItems>
    </PopupMenu>

    @if (this._CurrentState.Size != SizeType.None)
    {
        <div class="stack horizontal" style="align-items:center;">
            <span class="toolbar-content-text">@size1</span>
            <IconButton Icon="SvgIconType.Swap" Title="Rotate viewport" OnClick="OnClickRotateViewport" />
            <span class="toolbar-content-text">@size2</span>
        </div>
    }

</CanvasToolbarRegistrar>

@code
{
    [CascadingParameter]
    public required AddonsStore AddonsStore { get; init; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HelperScript HelperScript = default!;

    private enum Orientation
    {
        Portrait,
        Landscape
    }

    private enum SizeType
    {
        None,
        SmallMobile,
        LargeMobile,
        Tablet
    }

    private readonly IReadOnlyDictionary<SizeType, (string DisplayName, int ShrotSide, int LongSide)> SizeTypeToDetail = new Dictionary<SizeType, (string, int, int)>
        {
            [SizeType.None] = ("", 0, 0),
            [SizeType.SmallMobile] = ("Small mobile", 320, 568),
            [SizeType.LargeMobile] = ("Large mobile", 414, 896),
            [SizeType.Tablet] = ("Tablet", 834, 1112),
        };

    private class SizeState
    {
        public SizeType Size = SizeType.None;
        public Orientation Orientation = Orientation.Portrait;
    }

    private const string StorageKey = "Addons.ChangeSize.State";


    private SizeState _CurrentState = new();

    protected override async Task OnInitializedAsync()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        this._CurrentState = await this.HelperScript.LoadObjectFromLocalStorageAsync(StorageKey, this._CurrentState);
    }

    private async Task OnClickSize(SizeType size)
    {
        if (size == SizeType.None) await Task.Delay(10);
        this._CurrentState.Size = size;
        await this.UpdateSize();
    }

    private async Task OnClickRotateViewport()
    {
        this._CurrentState.Orientation = this._CurrentState.Orientation == Orientation.Portrait ? Orientation.Landscape : Orientation.Portrait;
        await this.UpdateSize();
    }

    private async ValueTask UpdateSize()
    {
        await this.HelperScript.SaveObjectToLocalStorageAsync(StorageKey, this._CurrentState);
        this.AddonsStore.SetCanvasFrameArguments(("dummy", null));
    }
}