<CanvasToolbarRegistrar>

    <PopupMenu MarginTop="6">
        <Trigger>
            <IconButton Icon="SvgIconType.Background" Title="Change the background of the preview" Active="@(this._BackgroundMode != BackgroundMode.None)" />
        </Trigger>
        <MenuItems>
            @if (this._BackgroundMode != BackgroundMode.None)
            {
                <MenuItem OnClick="() => OnClickBackground(BackgroundMode.None)">
                    Clear background
                </MenuItem>
            }
            <MenuItem Active="@(this._BackgroundMode == BackgroundMode.Light)" OnClick="() => OnClickBackground(BackgroundMode.Light)">
                <span>light</span>
                <span style="background:#f8f8f8; border-radius:1rem; display:block; height:1rem; width:1rem; box-shadow:hsl(203deg 50% 30% / 20%) 0 0 0 1px inset;"></span>
            </MenuItem>
            <MenuItem Active="@(this._BackgroundMode == BackgroundMode.Dark)" OnClick="() => OnClickBackground(BackgroundMode.Dark)">
                <span>dark</span>
                <span style="background:#333333; border-radius:1rem; display:block; height:1rem; width:1rem; box-shadow:hsl(203deg 50% 30% / 20%) 0 0 0 1px inset;"></span>
            </MenuItem>
        </MenuItems>
    </PopupMenu>

</CanvasToolbarRegistrar>

@code
{
    [CascadingParameter]
    public required AddonsStore AddonsStore { get; init; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HelperScript HelperScript = default!;

    private static class StorageKeys
    {
        public const string BackgroundMode = "Addons.Background.Mode";
    }

    private enum BackgroundMode
    {
        None,
        Light,
        Dark
    }

    private BackgroundMode _BackgroundMode = BackgroundMode.None;

    protected override async Task OnInitializedAsync()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        var backgroudnModeStr = await this.HelperScript.GetLocalStorageItemAsync(StorageKeys.BackgroundMode);
        this._BackgroundMode = Enum.TryParse<BackgroundMode>(backgroudnModeStr, out var backgroundMode) ? backgroundMode : BackgroundMode.None;

        this.SetCanvasFrameArguments();
    }

    private async Task OnClickBackground(BackgroundMode backgroundMode)
    {
        if (backgroundMode == BackgroundMode.None) await Task.Delay(10);
        this._BackgroundMode = backgroundMode;
        await this.HelperScript.SetLocalStorageItemAsync(StorageKeys.BackgroundMode, this._BackgroundMode.ToString());

        this.SetCanvasFrameArguments();
    }

    private void SetCanvasFrameArguments()
    {
        this.AddonsStore.SetCanvasFrameArguments(("backgrounds.value", this._BackgroundMode switch { BackgroundMode.Light => "#F8F8F8", BackgroundMode.Dark => "#333333", _ => "transparent" }));
    }
}