@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>@_PageTitle</PageTitle>

<div class="fill stack vertical addon-pane-@(this._AddonPanelVisibleCommand?.Flag == true ? "visible" : "hidden")">

    <SplitContainer Class="canvas-page-container fill" Orientation="this._AddonPanelLayout.SplitterOrientation" SecondPaneMinSize="80"
                    @bind-SecondPaneSize="_AddonPanelSize"
                    @bind-SecondPaneSize:after="OnAddonPanelSizeChanged">

        <FirstPane>
            <div class="canvas-container fill stack vertical">

                <ToolBar>
                    <IconButton Icon="SvgIconType.Reload" />
                    <IconButton Icon="SvgIconType.ZoomIn" />
                    <IconButton Icon="SvgIconType.ZoomOut" />
                    <IconButton Icon="SvgIconType.ZoomReset" />
                    <Separator />

                    <Spacer />

                    @if (this._AddonPanelVisibleCommand?.Flag != true)
                    {
                        <IconButton Icon="this.ToggleOrientationButtonIcon" Command="this._Commands[CommandType.AddonPanelVisible]" />
                    }

                    <IconButton Icon="SvgIconType.FullScreen" Command="this._Commands[CommandType.GoFullScreen]" />
                    <IconButton Icon="SvgIconType.OpenNewTab" Href="@this._CurrentCanvasFrameUrl" Target="_blank" Title="Open canvas in new tab" />
                    <IconButton Icon="SvgIconType.Link" Title="Copy canvas link" OnClick="this.OnClickCopyCanvasLink" />
                </ToolBar>

                <iframe @ref="_Iframe" src="@_InitialCanvasFrameUrl" class="canvas-frame fill"></iframe>
            </div>
        </FirstPane>

        <SecondPane>
            <div class="add-on-container fill stack vertical">
                <AddOnPanel Story="this._CurrentStory" SplitterOrientation="this._AddonPanelLayout.SplitterOrientation">
                </AddOnPanel>
            </div>
        </SecondPane>

    </SplitContainer>

</div>

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; set; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HelperScript HelperScript = default!;

    private CommandService _Commands = default!;

    private readonly Subscriptions _Subscriptions = new();

    private int _AddonPanelSize = 210;

    private AddonPanelLayout _AddonPanelLayout = new();

    private Command? _AddonPanelVisibleCommand;

    private string _PageTitle = "";

    private string _LastTitledParameter = "";

    private string _InitialCanvasFrameUrl = "";

    private string _CurrentCanvasFrameUrl = "";

    private Story? _CurrentStory = null;

    private readonly JSModule _JSModule;

    private ElementReference _Iframe;

    private string AddonPanelLayoutKeyName => this.GetType().Name + "." + nameof(_AddonPanelLayout);

    private bool _AfterFirstRenderd = false;

    private SvgIconType ToggleOrientationButtonIcon => this._AddonPanelLayout.SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.BottomSidePane,
        _ => SvgIconType.RightSidePane
    };

    public CanvasPage()
    {
        this._JSModule = new(() => this.JSRuntime, "./_content/BlazingStory/Internals/Pages/Canvas/CanvasPage.razor.js");
    }

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        this._Commands = this.Services.GetRequiredService<CommandService>();
        this._AddonPanelVisibleCommand = this._Commands[CommandType.AddonPanelVisible]!;
        this._Subscriptions.Add(
            this._Commands.Subscribe(CommandType.AddonPanelOrientation, this.OnToggleOrientation),
            this._AddonPanelVisibleCommand.Subscribe(this.OnToggleAddonPanelVisible)
        );
        this._InitialCanvasFrameUrl = this._CurrentCanvasFrameUrl = this.GetCanvasFrameUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        this.UpdateCurrentStory();
        this.UpdatePageTitle();
        await this.UpdateCanvasFrameUrlAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        this._AddonPanelLayout = await this.HelperScript.LoadObjectFromLocalStorageAsync(this.AddonPanelLayoutKeyName, this._AddonPanelLayout);
        this.UpdateAddonPanelSize(this._AddonPanelLayout.SplitterOrientation);
        this.StateHasChanged();
        this._AfterFirstRenderd = true;
    }

    private void UpdatePageTitle()
    {
        if (this._LastTitledParameter == this.RouteData.Parameter) return;
        if (this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story))
        {
            this._PageTitle = string.Join(" / ", story.Title.Split('/')) + " - " + story.Name + " - " + BlazingStoryApp.Title;
        }
        this._LastTitledParameter = this.RouteData.Parameter;
    }

    private async ValueTask UpdateCanvasFrameUrlAsync()
    {
        if (!this._AfterFirstRenderd) return;
        var nextCanvasFrameUrl = this.GetCanvasFrameUrl();
        if (this._CurrentCanvasFrameUrl == nextCanvasFrameUrl) return;
        this._CurrentCanvasFrameUrl = nextCanvasFrameUrl;
        await _JSModule.InvokeVoidAsync("navigateCanvasFrameTo", this._Iframe, nextCanvasFrameUrl);
    }

    private void UpdateCurrentStory()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;

        var path = this.RouteData.Parameter;
        if (this.StoriesStore.TryGetStoryByPath(path, out var story))
        {
            this._CurrentStory = story;
        }
        else this._CurrentStory = null;

        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged += Context_ArgumentChanged;
    }

    private string GetCanvasFrameUrl()
    {
        return this.NavigationManager.GetUriWithQueryParameters(
            uri: "./iframe.html",
            parameters: new Dictionary<string, object?>
                {
                    ["viewMode"] = this.RouteData.View,
                    ["id"] = this.RouteData.Parameter,
                    ["args"] = this.GetArgumentsUrlText()
                });
    }

    private string GetArgumentsUrlText()
    {
        if (this._CurrentStory == null) return "";
        return string.Join(':', this._CurrentStory.Context.Args.Select(arg => $"{arg.Key}:{arg.Value}"));
    }

    private async ValueTask Context_ArgumentChanged()
    {
        await this.UpdateCanvasFrameUrlAsync();
        this.StateHasChanged();
    }

    private async Task OnAddonPanelSizeChanged()
    {
        if (_AddonPanelLayout.SplitterOrientation == SplitterOrientation.Horizontal)
        {
            this._AddonPanelLayout.VerticalSize = this._AddonPanelSize;
        }
        else
        {
            this._AddonPanelLayout.HorizontalSize = this._AddonPanelSize;
        }
        await this.SaveAddonPanelLayoutAsync();
    }

    private void UpdateAddonPanelSize(SplitterOrientation splitterOrientation)
    {
        this._AddonPanelSize = splitterOrientation switch
        {
            SplitterOrientation.Vertical => this._AddonPanelLayout.HorizontalSize,
            _ => this._AddonPanelLayout.VerticalSize
        };
    }

    private async ValueTask OnToggleOrientation()
    {
        _AddonPanelLayout.SplitterOrientation = _AddonPanelLayout.SplitterOrientation switch
        {
            SplitterOrientation.Horizontal => SplitterOrientation.Vertical,
            _ => SplitterOrientation.Horizontal
        };
        this.UpdateAddonPanelSize(this._AddonPanelLayout.SplitterOrientation);
        await this.SaveAddonPanelLayoutAsync();
    }

    private async ValueTask OnToggleAddonPanelVisible()
    {
        var command = this._Commands[CommandType.AddonPanelVisible]!;
        command.Flag = !command.Flag;
        await this.SaveAddonPanelLayoutAsync();
    }

    private async Task OnClickCopyCanvasLink()
    {
        var canvalLinkUrl = this._CurrentCanvasFrameUrl.TrimStart('.', '/');
        await this.HelperScript.CopyTextToClipboardAsync(canvalLinkUrl);
    }

    private async ValueTask SaveAddonPanelLayoutAsync()
    {
        await this.HelperScript.SaveObjectToLocalStorageAsync(this.AddonPanelLayoutKeyName, this._AddonPanelLayout);
    }

    public async ValueTask DisposeAsync()
    {
        this._Subscriptions.Dispose();
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;
        await _JSModule.DisposeAsync();
    }
}