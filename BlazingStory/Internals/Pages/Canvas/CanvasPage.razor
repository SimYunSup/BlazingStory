@implements IDisposable

<PageTitle>@_PageTitle</PageTitle>

<div class="fill stack vertical addon-pane-@(this.AddonPanelVisible ? "visible" : "hidden")">

    <SplitContainer Class="canvas-page-container fill" Orientation="this._AddonPanelLayout.SplitterOrientation" SecondPaneMinSize="80"
    @bind-SecondPaneSize="_AddonPanelSize"
    @bind-SecondPaneSize:after="OnAddonPanelSizeChanged">

        <FirstPane>
            <div class="canvas-container fill stack vertical">

                @* -- Toolbar -- *@
                <ToolBar Visible="this._ToolbarVisibleCommand?.Flag == true">
                    @if (this._Commands[CommandType.SideBarVisible]?.Flag == false)
                    {
                        <IconButton Icon="SvgIconType.Sidebar" Command="this._Commands[CommandType.SideBarVisible]" />
                        <Separator />
                    }

                    <IconButton Icon="SvgIconType.Reload" OnClick="OnClickReload" Title="Reload the story" />
                    <IconButton Icon="SvgIconType.ZoomIn" OnClick="OnClickZoomIn" Title="Zoom in" />
                    <IconButton Icon="SvgIconType.ZoomOut" OnClick="OnClickZoomOut" Title="Zoom out" />
                    <IconButton Icon="SvgIconType.ZoomReset" OnClick="OnClickResetZoom" Title="Reset zoom" />
                    <Separator />

                    @* -- Render Add-On's Toolbar Contents -- *@
                    @foreach (var addon in this.AddonsStore.GetAddons(AddonType.CanvasPage))
                    {
                        <text>@addon.ToolbarContents</text>
                    }

                    <Spacer />

                    @if (this._AddonPanelVisibleCommand?.Flag != true)
                    {
                        <IconButton Icon="this.ToggleOrientationButtonIcon" Command="this._AddonPanelVisibleCommand" />
                    }
                    @if ((this._GoFullscreenCommand?.Flag ?? true) == true)
                    {
                        <IconButton Icon="SvgIconType.CircleClose" Command="this._GoFullscreenCommand" Title="Exit full screen [{0}]" />
                    }
                    else
                    {
                        <IconButton Icon="SvgIconType.FullScreen" Command="this._GoFullscreenCommand" />
                    }

                    <IconButton Icon="SvgIconType.OpenNewTab" Href="@this._PreviewFrame?.CurrentPreviewFrameUrl" Target="_blank" Title="Open canvas in new tab" />
                    <IconButton Icon="SvgIconType.Link" Title="Copy canvas link" OnClick="this.OnClickCopyCanvasLink" />
                </ToolBar>

                @* -- IFrame -- *@
                <div class="canvas-frame-viewport fill">
                    <PreviewFrame @ref="_PreviewFrame"
                                  ViewMode="story"
                                  Id="@this.RouteData.Parameter"
                                  Args="this._CurrentStory?.Context.Args"
                                  Globals="this.AddonsStore.GetFrameArguments(AddonType.CanvasPage)" />
                </div>
            </div>
        </FirstPane>

        <SecondPane>

            @* -- Addons -- *@

            <div class="add-on-container fill stack vertical">
                <AddOnPanel Story="this._CurrentStory" SplitterOrientation="this._AddonPanelLayout.SplitterOrientation">
                </AddOnPanel>
            </div>
        </SecondPane>

    </SplitContainer>

</div>

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; init; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; init; }

    [CascadingParameter]
    public required AddonsStore AddonsStore { get; init; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private PreviewFrame? _PreviewFrame;

    private HelperScript HelperScript = default!;

    private CommandService _Commands = default!;

    private Command? _ToolbarVisibleCommand;

    private Command? _AddonPanelVisibleCommand;

    private Command? _GoFullscreenCommand;

    private readonly Subscriptions _Subscriptions = new();

    private bool AddonPanelVisible => (this._AddonPanelVisibleCommand?.Flag ?? true) && !(this._GoFullscreenCommand?.Flag ?? false);

    private int _AddonPanelSize = 210;

    private AddonPanelLayout _AddonPanelLayout = new();

    private string _PageTitle = "";

    private string _LastTitledParameter = "";

    private Story? _CurrentStory = null;

    private string AddonPanelLayoutKeyName => this.GetType().Name + "." + nameof(_AddonPanelLayout);

    private SvgIconType ToggleOrientationButtonIcon => this._AddonPanelLayout.SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.BottomSidePane,
        _ => SvgIconType.RightSidePane
    };

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
        this.AddonsStore.OnFrameArgumentsChanged += AddonsStore_OnFrameArgumentsChanged;

        this._Commands = this.Services.GetRequiredService<CommandService>();
        this._ToolbarVisibleCommand = this._Commands[CommandType.ToolBarVisible]!;
        this._AddonPanelVisibleCommand = this._Commands[CommandType.AddonPanelVisible]!;
        this._GoFullscreenCommand = this._Commands[CommandType.GoFullScreen];

        this._Subscriptions.Add(
            this._Commands.Subscribe(CommandType.AddonPanelOrientation, this.OnToggleOrientation),
            this._ToolbarVisibleCommand.Subscribe(this.OnToggleToolbarVisible),
            this._AddonPanelVisibleCommand.Subscribe(this.OnToggleAddonPanelVisible)
        );
    }

    protected override void OnParametersSet()
    {
        this.UpdateCurrentStory();
        this.UpdatePageTitle();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        this._AddonPanelLayout = await this.HelperScript.LoadObjectFromLocalStorageAsync(this.AddonPanelLayoutKeyName, this._AddonPanelLayout);
        this.UpdateAddonPanelSize(this._AddonPanelLayout.SplitterOrientation);
        this.StateHasChanged();
    }

    private void UpdatePageTitle()
    {
        if (this._LastTitledParameter == this.RouteData.Parameter) return;
        if (this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story))
        {
            this._PageTitle = string.Join(" / ", story.Title.Split('/')) + " - " + story.Name + " - " + BlazingStoryApp.Title;
        }
        this._LastTitledParameter = this.RouteData.Parameter;
    }

    private void AddonsStore_OnFrameArgumentsChanged(object? sender, EventArgs args)
    {
        this.StateHasChanged();
    }

    private void UpdateCurrentStory()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;

        var path = this.RouteData.Parameter;
        if (this.StoriesStore.TryGetStoryByPath(path, out var story))
        {
            this._CurrentStory = story;
        }
        else this._CurrentStory = null;

        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged += Context_ArgumentChanged;
    }

    private ValueTask Context_ArgumentChanged()
    {
        this.StateHasChanged();
        return ValueTask.CompletedTask;
    }

    private async Task OnAddonPanelSizeChanged()
    {
        if (_AddonPanelLayout.SplitterOrientation == SplitterOrientation.Horizontal)
        {
            this._AddonPanelLayout.VerticalSize = this._AddonPanelSize;
        }
        else
        {
            this._AddonPanelLayout.HorizontalSize = this._AddonPanelSize;
        }
        await this.SaveAddonPanelLayoutAsync();
    }

    private void UpdateAddonPanelSize(SplitterOrientation splitterOrientation)
    {
        this._AddonPanelSize = splitterOrientation switch
        {
            SplitterOrientation.Vertical => this._AddonPanelLayout.HorizontalSize,
            _ => this._AddonPanelLayout.VerticalSize
        };
    }

    private async ValueTask OnToggleOrientation()
    {
        _AddonPanelLayout.SplitterOrientation = _AddonPanelLayout.SplitterOrientation switch
        {
            SplitterOrientation.Horizontal => SplitterOrientation.Vertical,
            _ => SplitterOrientation.Horizontal
        };
        this.UpdateAddonPanelSize(this._AddonPanelLayout.SplitterOrientation);
        await this.SaveAddonPanelLayoutAsync();
    }

    private async ValueTask OnToggleToolbarVisible()
    {
        this._ToolbarVisibleCommand?.ToggleFlag();
        await ValueTask.CompletedTask;
    }

    private async ValueTask OnToggleAddonPanelVisible()
    {
        this._AddonPanelVisibleCommand?.ToggleFlag();
        await ValueTask.CompletedTask;
    }

    private async Task OnClickCopyCanvasLink()
    {
        if (this._PreviewFrame == null) return;
        var canvalLinkUrl = this._PreviewFrame.CurrentPreviewFrameUrl.TrimStart('.', '/');
        await this.HelperScript.CopyTextToClipboardAsync(canvalLinkUrl);
    }

    private async Task OnClickReload()
    {
        if (this._PreviewFrame != null) await this._PreviewFrame.ReloadAsync();
    }

    private async Task OnClickZoomIn()
    {
        if (this._PreviewFrame != null) await this._PreviewFrame.ZoomInAsync();
    }

    private async Task OnClickZoomOut()
    {
        if (this._PreviewFrame != null) await this._PreviewFrame.ZoomOutAsync();
    }

    private async Task OnClickResetZoom()
    {
        if (this._PreviewFrame != null) await this._PreviewFrame.ResetZoomAsync();
    }

    private async ValueTask SaveAddonPanelLayoutAsync()
    {
        await this.HelperScript.SaveObjectToLocalStorageAsync(this.AddonPanelLayoutKeyName, this._AddonPanelLayout);
    }

    public void Dispose()
    {
        this.AddonsStore.OnFrameArgumentsChanged -= AddonsStore_OnFrameArgumentsChanged;
        this._Subscriptions.Dispose();
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;
    }
}