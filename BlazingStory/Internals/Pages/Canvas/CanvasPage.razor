@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>@_PageTitle</PageTitle>

<SplitContainer Class="fill" Orientation="SplitterOrientation.Horizontal" SecondPaneMinSize="80"
                @bind-SecondPaneSize="_AddonPaneSize"
                @bind-SecondPaneSize:after="OnAddonPaneSizeChanged">

    <FirstPane>
        <div class="canvas-container fill stack">
            <iframe @ref="_Iframe" src="@_InitialCanvasFrameUrl" class="canvas-frame fill"></iframe>
        </div>
    </FirstPane>

    <SecondPane>
        <div class="add-on-container fill stack vertical">
            <AddOnPanel Story="this._CurrentStory"></AddOnPanel>
        </div>
    </SecondPane>

</SplitContainer>

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; set; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; set; }

    [CascadingParameter]
    internal HelperScript HelperScript { get; init; } = default!;

    private int _AddonPaneSize = 210;

    private string _PageTitle = "";

    private string _LastTitledParameter = "";

    private string _InitialCanvasFrameUrl = "";

    private string _CurrentCanvasFrameUrl = "";

    private Story? _CurrentStory = null;

    private IJSObjectReference? _JSModule;

    private ElementReference _Iframe;

    private string AddOnPaneSizeKeyName => this.GetType().Name + "." + nameof(_AddonPaneSize);

    protected override void OnInitialized()
    {
        _InitialCanvasFrameUrl = _CurrentCanvasFrameUrl = this.GetCanvasFrameUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        this.UpdateCurrentStory();
        this.UpdatePageTitle();
        await this.UpdateCanvasFrameUrlAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        this._AddonPaneSize = await this.HelperScript.GetLocalStorageItemAsync(AddOnPaneSizeKeyName, this._AddonPaneSize);
        this.StateHasChanged();
    }

    private void UpdatePageTitle()
    {
        if (this._LastTitledParameter == this.RouteData.Parameter) return;
        if (this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story))
        {
            this._PageTitle = string.Join(" / ", story.Title.Split('/')) + " - " + story.Name + " - " + BlazingStoryApp.Title;
        }
        this._LastTitledParameter = this.RouteData.Parameter;
    }

    private async ValueTask UpdateCanvasFrameUrlAsync()
    {
        var nextCanvasFrameUrl = this.GetCanvasFrameUrl();
        if (this._CurrentCanvasFrameUrl == nextCanvasFrameUrl) return;
        this._CurrentCanvasFrameUrl = nextCanvasFrameUrl;
        var jsModule = await this.GetJSModuleAsync();
        await jsModule.InvokeVoidAsync("navigateCanvasFrameTo", this._Iframe, nextCanvasFrameUrl);
    }

    private void UpdateCurrentStory()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;

        var path = this.RouteData.Parameter;
        if (this.StoriesStore.TryGetStoryByPath(path, out var story))
        {
            this._CurrentStory = story;
        }
        else this._CurrentStory = null;

        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged += Context_ArgumentChanged;
    }

    private string GetCanvasFrameUrl()
    {
        return this.NavigationManager.GetUriWithQueryParameters(
            uri: "./iframe.html",
            parameters: new Dictionary<string, object?>
                {
                    ["viewMode"] = this.RouteData.View,
                    ["id"] = this.RouteData.Parameter,
                    ["args"] = this.GetArgumentsUrlText()
                });
    }

    private string GetArgumentsUrlText()
    {
        if (this._CurrentStory == null) return "";
        return string.Join(':', this._CurrentStory.Context.Args.Select(arg => $"{arg.Key}:{arg.Value}"));
    }

    private async ValueTask Context_ArgumentChanged()
    {
        await this.UpdateCanvasFrameUrlAsync();
    }

    private async ValueTask<IJSObjectReference> GetJSModuleAsync()
    {
        if (this._JSModule == null)
        {
            this._JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazingStory/Internals/Pages/Canvas/CanvasPage.razor.js");
        }
        return this._JSModule;
    }

    private async Task OnAddonPaneSizeChanged()
    {
        await this.HelperScript.SetLocalStorageItemAsync(this.AddOnPaneSizeKeyName, _AddonPaneSize);
    }

    public async ValueTask DisposeAsync()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;
        if (this._JSModule != null) try { await this._JSModule.DisposeAsync(); } catch (JSDisconnectedException) { }
    }
}