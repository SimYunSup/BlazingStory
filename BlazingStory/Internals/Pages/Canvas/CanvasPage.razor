@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>@_PageTitle</PageTitle>

<div class="fill stack vertical addon-pane-@(this._AddonPaneVisible ? "visible" : "hidden")">

    <SplitContainer Class="canvas-page-container fill" Orientation="this._SplitterOrientation" SecondPaneMinSize="80"
                    @bind-SecondPaneSize="_AddonPaneSize"
                    @bind-SecondPaneSize:after="OnAddonPaneSizeChanged">

        <FirstPane>
            <div class="canvas-container fill stack vertical">

                <ToolBar>
                    <TabButtonGroup>
                        <TabButton Active="true">
                            Canvas
                        </TabButton>
                        <TabButton>
                            Docs
                        </TabButton>
                    </TabButtonGroup>
                    <Separator />
                    <IconButton Icon="SvgIconType.ZoomIn" />
                    <IconButton Icon="SvgIconType.ZoomOut" />

                    <Spacer />

                    @if (!this._AddonPaneVisible)
                    {
                        <IconButton Icon="this.ToggleOrientationButtonIcon" Title="Show addons" OnClick="this.OnClickShowAddonPane" />
                    }
                </ToolBar>

                <iframe @ref="_Iframe" src="@_InitialCanvasFrameUrl" class="canvas-frame fill"></iframe>
            </div>
        </FirstPane>

        <SecondPane>
            <div class="add-on-container fill stack vertical">
                <AddOnPanel Story="this._CurrentStory"
                            SplitterOrientation="this._SplitterOrientation"
                            OnToggleOrientation="OnToggleOrientation"
                            OnClickClose="OnClickAddonPaneClose">
                </AddOnPanel>
            </div>
        </SecondPane>

    </SplitContainer>

</div>

@code
{
    [CascadingParameter]
    public required StoriesStore StoriesStore { get; set; }

    [CascadingParameter]
    public required QueryRouteData RouteData { get; set; }

    [CascadingParameter]
    internal HelperScript HelperScript { get; init; } = default!;

    private SplitterOrientation _SplitterOrientation = SplitterOrientation.Horizontal;

    private bool _AddonPaneVisible = true;

    private int _AddonPaneSize = 210;

    private int _AddonPaneSizeHorizontal = 210;

    private int _AddonPaneSizeVertical = 210;

    private string _PageTitle = "";

    private string _LastTitledParameter = "";

    private string _InitialCanvasFrameUrl = "";

    private string _CurrentCanvasFrameUrl = "";

    private Story? _CurrentStory = null;

    private IJSObjectReference? _JSModule;

    private ElementReference _Iframe;

    private string AddOnPaneVisibleKeyName => this.GetType().Name + "." + nameof(_AddonPaneVisible);

    private string AddOnPaneSizeKeyName => this.GetType().Name + "." + nameof(_AddonPaneSize);

    private string SplitterOrientationKeyName => this.GetType().Name + "." + nameof(_SplitterOrientation);

    private string AddonPaneSizeHorizontalKeyName => this.GetType().Name + "." + nameof(_AddonPaneSizeHorizontal);

    private string AddonPaneSizeVerticalKeyName => this.GetType().Name + "." + nameof(_AddonPaneSizeVertical);

    private SvgIconType ToggleOrientationButtonIcon => this._SplitterOrientation switch
    {
        SplitterOrientation.Horizontal => SvgIconType.BottomSidePane,
        _ => SvgIconType.RightSidePane
    };

    protected override void OnInitialized()
    {
        _InitialCanvasFrameUrl = _CurrentCanvasFrameUrl = this.GetCanvasFrameUrl();
    }

    protected override async Task OnParametersSetAsync()
    {
        this.UpdateCurrentStory();
        this.UpdatePageTitle();
        await this.UpdateCanvasFrameUrlAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        this._SplitterOrientation = (SplitterOrientation)await this.HelperScript.GetLocalStorageItemAsync<int>(SplitterOrientationKeyName, (int)this._SplitterOrientation);
        this._AddonPaneVisible = (await this.HelperScript.GetLocalStorageItemAsync(this.AddOnPaneVisibleKeyName))?.ToLower() != "false";
        this._AddonPaneSizeHorizontal = await this.HelperScript.GetLocalStorageItemAsync(this.AddonPaneSizeHorizontalKeyName, this._AddonPaneSizeHorizontal);
        this._AddonPaneSizeVertical = await this.HelperScript.GetLocalStorageItemAsync(this.AddonPaneSizeVerticalKeyName, this._AddonPaneSizeVertical);
        this.UpdateAddonPaneSize(this._SplitterOrientation);

        this.StateHasChanged();
    }

    private void UpdatePageTitle()
    {
        if (this._LastTitledParameter == this.RouteData.Parameter) return;
        if (this.StoriesStore.TryGetStoryByPath(this.RouteData.Parameter, out var story))
        {
            this._PageTitle = string.Join(" / ", story.Title.Split('/')) + " - " + story.Name + " - " + BlazingStoryApp.Title;
        }
        this._LastTitledParameter = this.RouteData.Parameter;
    }

    private async ValueTask UpdateCanvasFrameUrlAsync()
    {
        var nextCanvasFrameUrl = this.GetCanvasFrameUrl();
        if (this._CurrentCanvasFrameUrl == nextCanvasFrameUrl) return;
        this._CurrentCanvasFrameUrl = nextCanvasFrameUrl;
        var jsModule = await this.GetJSModuleAsync();
        await jsModule.InvokeVoidAsync("navigateCanvasFrameTo", this._Iframe, nextCanvasFrameUrl);
    }

    private void UpdateCurrentStory()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;

        var path = this.RouteData.Parameter;
        if (this.StoriesStore.TryGetStoryByPath(path, out var story))
        {
            this._CurrentStory = story;
        }
        else this._CurrentStory = null;

        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged += Context_ArgumentChanged;
    }

    private string GetCanvasFrameUrl()
    {
        return this.NavigationManager.GetUriWithQueryParameters(
            uri: "./iframe.html",
            parameters: new Dictionary<string, object?>
                {
                    ["viewMode"] = this.RouteData.View,
                    ["id"] = this.RouteData.Parameter,
                    ["args"] = this.GetArgumentsUrlText()
                });
    }

    private string GetArgumentsUrlText()
    {
        if (this._CurrentStory == null) return "";
        return string.Join(':', this._CurrentStory.Context.Args.Select(arg => $"{arg.Key}:{arg.Value}"));
    }

    private async ValueTask Context_ArgumentChanged()
    {
        await this.UpdateCanvasFrameUrlAsync();
    }

    private async ValueTask<IJSObjectReference> GetJSModuleAsync()
    {
        if (this._JSModule == null)
        {
            this._JSModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazingStory/Internals/Pages/Canvas/CanvasPage.razor.js");
        }
        return this._JSModule;
    }

    private async Task OnAddonPaneSizeChanged()
    {
        if (_SplitterOrientation == SplitterOrientation.Horizontal)
        {
            this._AddonPaneSizeVertical = this._AddonPaneSize;
            await this.HelperScript.SetLocalStorageItemAsync(this.AddonPaneSizeVerticalKeyName, _AddonPaneSizeVertical);
        }
        if (_SplitterOrientation == SplitterOrientation.Vertical)
        {
            this._AddonPaneSizeHorizontal = this._AddonPaneSize;
            await this.HelperScript.SetLocalStorageItemAsync(this.AddonPaneSizeHorizontalKeyName, _AddonPaneSizeHorizontal);
        }
    }

    private void UpdateAddonPaneSize(SplitterOrientation splitterOrientation)
    {
        this._AddonPaneSize = splitterOrientation switch
        {
            SplitterOrientation.Vertical => this._AddonPaneSizeHorizontal,
            _ => this._AddonPaneSizeVertical
        };
    }

    private async Task OnToggleOrientation()
    {
        _SplitterOrientation = _SplitterOrientation switch
        {
            SplitterOrientation.Horizontal => SplitterOrientation.Vertical,
            _ => SplitterOrientation.Horizontal
        };
        this.UpdateAddonPaneSize(this._SplitterOrientation);
        await this.HelperScript.SetLocalStorageItemAsync(this.SplitterOrientationKeyName, (int)this._SplitterOrientation);
    }

    private async Task OnClickShowAddonPane()
    {
        this._AddonPaneVisible = true;
        await this.HelperScript.SetLocalStorageItemAsync(this.AddOnPaneVisibleKeyName, this._AddonPaneVisible);
    }

    private async Task OnClickAddonPaneClose()
    {
        this._AddonPaneVisible = false;
        await this.HelperScript.SetLocalStorageItemAsync(this.AddOnPaneVisibleKeyName, this._AddonPaneVisible);
    }

    public async ValueTask DisposeAsync()
    {
        if (this._CurrentStory != null) this._CurrentStory.Context.ArgumentChanged -= Context_ArgumentChanged;
        if (this._JSModule != null) try { await this._JSModule.DisposeAsync(); } catch (JSDisconnectedException) { }
    }
}