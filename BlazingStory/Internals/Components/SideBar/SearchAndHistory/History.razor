<div class="history">

    <div class="caption sub-heading">
        Recently opened
    </div>

    <div class="recently-opened">

        <!-- Max 8 items -->
        @foreach (var item in this.NavigationHistory.HistoryItems)
        {
            var title = string.Join(" / ", item.Segments.Append(item.Caption));
            var id = $"p:{item.Id}";
            var iconType = item.Type == NavigationTreeItemType.Story ? SvgIconType.Component : SvgIconType.Document;
            var cssClass = item.Type == NavigationTreeItemType.Story ? "type-story-collection" : "type-docs";

            <button @key="id" title="@title" class="item @cssClass" @onclick="@(() => this.OnClickHistoryItem(item))" @onpointerenter="@(() => OnHover(id))" aria-selected="@IsSelected(id)">
                <SvgIcon Type="iconType" />
                <div class="label">
                    <div class="title">
                        @item.Caption
                    </div>
                    <div class="path">
                        @foreach (var segment in item.Segments)
                        {
                            <span>@segment</span>
                        }
                    </div>
                </div>
            </button>
        }

    </div>

    <div class="actions">

        <div class="action" @onclick="BackToComponents" @onpointerenter="@(() => OnHover("back-to-components"))" aria-selected="@IsSelected("back-to-components")">
            <SvgIcon Type="SvgIconType.NavigationBack" />
            <span class="text">Back to components</span>
            <KeyMap Key="new (Code.Escape)" FreeSize="true" />
        </div>

        <div class="action" @onclick="ClearHistory" @onpointerenter="@(() => OnHover("clear-history"))" aria-selected="@IsSelected("clear-history")">
            <SvgIcon Type="SvgIconType.TrashCan" />
            <span class="text">Clear history</span>
        </div>

    </div>
</div>

@code
{
    [CascadingParameter]
    protected NavigationHistory NavigationHistory { get; init; } = default!;

    [Parameter]
    public EventCallback OnClickExit { get; set; }

    private string? _LastHoveredId;

    private bool IsSelected(string id) => this._LastHoveredId == id;

    private void OnHover(string id)
    {
        this._LastHoveredId = id;
    }

    private async Task OnClickHistoryItem(NavigationHistoryItem historyItem)
    {
        await this.OnClickExit.InvokeAsync();
    }

    private async Task BackToComponents()
    {
        await this.OnClickExit.InvokeAsync();
    }

    private void ClearHistory()
    {
    }
}