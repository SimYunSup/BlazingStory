@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<NavigationTree> Logger

<div class="explorer-menu">
    <NavigationTreeItemComponent Item="_NavigationRoot" SubHeading="true" GetNavigationUrl="this.GetNavigationUrl" />
</div>

@code {
    [CascadingParameter]
    protected StoriesStore StoriesStore { get; init; } = default!;

    [CascadingParameter]
    protected QueryRouteData RouteData { get; init; } = default!;

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    [CascadingParameter]
    protected NavigationHistory NavigationHistory { get; init; } = default!;

    private readonly NavigationTreeBuilder _NavigationTreeBuilder = new();

    private NavigationTreeItem _NavigationRoot = new();

    private readonly Subscriptions _Subscriptions = new();

    protected override void OnInitialized()
    {
        var expandedNavigationPath = this.RouteData.RouteToStoryOrDocs ? this.RouteData.Parameter : null;
        this._NavigationRoot = _NavigationTreeBuilder.Build(this.StoriesStore.StoryContainers, expandedNavigationPath);

        var commandService = this.Services.GetRequiredService<CommandService>();
        this._Subscriptions.Add(
            commandService.Subscribe(CommandType.PreviousComponent, OnPreviousComponent),
            commandService.Subscribe(CommandType.NextComponent, OnNextComponent),
            commandService.Subscribe(CommandType.PreviousStory, OnPreviousStory),
            commandService.Subscribe(CommandType.NextStory, OnNextStory),
            commandService.Subscribe(CommandType.CollapseAll, OnCollapseAll)
        );

        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender) return;

        // Navigte to default story if the navigationPath is empty.
        var navigationPath = this.RouteData?.Parameter;
        if (!string.IsNullOrEmpty(navigationPath)) return;

        var storyItems = this._NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationTreeItemType.Story)
            .ToArray();
        var activeStory = storyItems.FirstOrDefault(item => item.NavigationPath == navigationPath);
        if (activeStory != null) return;

        var firstStory = storyItems.FirstOrDefault();
        if (firstStory == null) return;

        this._NavigationRoot.EnsureExpandedTo(firstStory);
        this.NavigationManager.NavigateTo(this.GetNavigationUrl(firstStory));
    }

    private bool TryGetActiveNavigationItem([NotNullWhen(true)] out NavigationTreeItem? activeItem)
    {
        activeItem = null;

        var navigationPath = this.RouteData?.Parameter;
        Console.WriteLine($"A-1: navigationPath = {navigationPath}");
        if (string.IsNullOrEmpty(navigationPath)) return false;

        var storyItems = this._NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationTreeItemType.Story)
            .ToArray();
        activeItem = storyItems.FirstOrDefault(item => item.NavigationPath == navigationPath);
        Console.WriteLine($"A-2: activeItem = {activeItem}");
        if (activeItem == null) return false;

        return true;
    }

    private ValueTask OnPreviousComponent() => this.MoveComponent(delta: -1);

    private ValueTask OnNextComponent() => this.MoveComponent(delta: +1);

    private ValueTask MoveComponent(int delta)
    {
        var navigationPath = this.RouteData?.Parameter;

        var currentComponent = default(NavigationTreeItem);
        foreach (var item in this._NavigationRoot.EnumAll())
        {
            if (item.Type == NavigationTreeItemType.StoryCollection) currentComponent = item;
            if (item.NavigationPath == navigationPath) break;
        }
        if (currentComponent == null) return ValueTask.CompletedTask;

        var componentItems = this._NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationTreeItemType.StoryCollection)
            .ToArray();

        var index = Array.IndexOf<NavigationTreeItem>(componentItems, currentComponent);
        var indexMoveTo = index + delta;
        if (indexMoveTo < 0 || componentItems.Length <= indexMoveTo) return ValueTask.CompletedTask;

        var componentMoveTo = componentItems[index + delta];
        var itemMoveTo = componentMoveTo.SubItems.FirstOrDefault();
        if (itemMoveTo == null) return ValueTask.CompletedTask;

        this._NavigationRoot.EnsureExpandedTo(itemMoveTo);

        this.NavigationManager.NavigateTo(this.GetNavigationUrl(itemMoveTo));
        return ValueTask.CompletedTask;
    }

    private ValueTask OnPreviousStory() => this.MoveStory(delta: -1);

    private ValueTask OnNextStory() => this.MoveStory(delta: +1);

    private ValueTask MoveStory(int delta)
    {
        var storyItems = this._NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationTreeItemType.Story)
            .ToArray();
        var index = Array.FindIndex<NavigationTreeItem>(storyItems, item => this.RouteData?.Parameter == item.NavigationPath);
        var indexMoveTo = index + delta;
        if (indexMoveTo < 0 || storyItems.Length <= indexMoveTo) return ValueTask.CompletedTask;

        var itemMoveTo = storyItems[index + delta];
        this._NavigationRoot.EnsureExpandedTo(itemMoveTo);

        this.NavigationManager.NavigateTo(this.GetNavigationUrl(itemMoveTo));
        return ValueTask.CompletedTask;
    }

    private ValueTask OnCollapseAll()
    {
        foreach (var item in this._NavigationRoot.SubItems.SelectMany(headerItem => headerItem.SubItems))
        {
            item.ApplyExpansionRecursively(false);
        }
        return ValueTask.CompletedTask;
    }

    private string GetNavigationUrl(NavigationTreeItem item)
    {
        return "./?path=/story/" + item.NavigationPath;
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        Console.WriteLine("M-1: NavigationManager_LocationChanged");
        if (!TryGetActiveNavigationItem(out var activeItem)) return;
        Console.WriteLine("M-2: NavigationManager_LocationChanged");
        this.NavigationHistory.AddAsync(this._NavigationRoot, activeItem).AndLogException(this.Logger);
    }

    public void Dispose()
    {
        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;
        this._Subscriptions.Dispose();
    }
}
