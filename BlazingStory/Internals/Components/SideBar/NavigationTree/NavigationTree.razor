@implements IDisposable
@inject NavigationManager NavigationManager
@inject ILogger<NavigationTree> Logger

<div class="explorer-menu">
    <NavigationTreeItemComponent Item="NavigationRoot" SubHeading="true" />
</div>

@code {
    [CascadingParameter]
    protected StoriesStore StoriesStore { get; init; } = default!;

    [CascadingParameter]
    protected QueryRouteData RouteData { get; init; } = default!;

    [CascadingParameter]
    protected IServiceProvider Services { get; init; } = default!;

    private NavigationService? _NavigationService;

    [Parameter, EditorRequired]
    public NavigationTreeItem NavigationRoot { get; set; } = new();

    private readonly Subscriptions _Subscriptions = new();

    protected override void OnInitialized()
    {
        this._NavigationService = this.Services.GetRequiredService<NavigationService>();
        this.NavigationManager.LocationChanged += NavigationManager_LocationChanged;

        var commandService = this.Services.GetRequiredService<CommandService>();
        this._Subscriptions.Add(
            commandService.Subscribe(CommandType.PreviousComponent, OnPreviousComponent),
            commandService.Subscribe(CommandType.NextComponent, OnNextComponent),
            commandService.Subscribe(CommandType.PreviousStory, OnPreviousStory),
            commandService.Subscribe(CommandType.NextStory, OnNextStory),
            commandService.Subscribe(CommandType.CollapseAll, OnCollapseAll)
        );
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Navigte to default story if the navigationPath is empty.
            this.NavigateToDefaultStory();

            this.NavigationManager_LocationChanged(this, new(this.NavigationManager.Uri, isNavigationIntercepted: true));
        }
    }

    private void NavigateToDefaultStory()
    {
        if (TryGetActiveNavigationItem(out var _, out var storyItems)) return;

        var firstStory = storyItems.FirstOrDefault();
        if (firstStory == null) return;

        this.NavigationRoot.EnsureExpandedTo(firstStory);
        this._NavigationService?.NavigateTo(firstStory);
    }

    private bool TryGetActiveNavigationItem([NotNullWhen(true)] out NavigationTreeItem? activeItem, out IEnumerable<NavigationTreeItem> storyItems)
    {
        activeItem = null;
        storyItems = this.NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationItemType.Story)
            .ToArray();

        var navigationPath = this.RouteData?.Parameter;
        if (string.IsNullOrEmpty(navigationPath)) return false;

        activeItem = storyItems.FirstOrDefault(item => item.NavigationPath == navigationPath);
        if (activeItem == null) return false;

        return true;
    }

    private ValueTask OnPreviousComponent() => this.MoveComponent(delta: -1);

    private ValueTask OnNextComponent() => this.MoveComponent(delta: +1);

    private ValueTask MoveComponent(int delta)
    {
        var navigationPath = this.RouteData?.Parameter;

        var currentComponent = default(NavigationTreeItem);
        foreach (var item in this.NavigationRoot.EnumAll())
        {
            if (item.Type == NavigationItemType.StoryCollection) currentComponent = item;
            if (item.NavigationPath == navigationPath) break;
        }
        if (currentComponent == null) return ValueTask.CompletedTask;

        var componentItems = this.NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationItemType.StoryCollection)
            .ToArray();

        var index = Array.IndexOf<NavigationTreeItem>(componentItems, currentComponent);
        var indexMoveTo = index + delta;
        if (indexMoveTo < 0 || componentItems.Length <= indexMoveTo) return ValueTask.CompletedTask;

        var componentMoveTo = componentItems[index + delta];
        var itemMoveTo = componentMoveTo.SubItems.FirstOrDefault();
        if (itemMoveTo == null) return ValueTask.CompletedTask;

        this.NavigationRoot.EnsureExpandedTo(itemMoveTo);

        this._NavigationService?.NavigateTo(itemMoveTo);
        return ValueTask.CompletedTask;
    }

    private ValueTask OnPreviousStory() => this.MoveStory(delta: -1);

    private ValueTask OnNextStory() => this.MoveStory(delta: +1);

    private ValueTask MoveStory(int delta)
    {
        var storyItems = this.NavigationRoot.EnumAll()
            .Where(item => item.Type == NavigationItemType.Story)
            .ToArray();
        var index = Array.FindIndex<NavigationTreeItem>(storyItems, item => this.RouteData?.Parameter == item.NavigationPath);
        var indexMoveTo = index + delta;
        if (indexMoveTo < 0 || storyItems.Length <= indexMoveTo) return ValueTask.CompletedTask;

        var itemMoveTo = storyItems[index + delta];
        this.NavigationRoot.EnsureExpandedTo(itemMoveTo);

        this._NavigationService?.NavigateTo(itemMoveTo);
        return ValueTask.CompletedTask;
    }

    private ValueTask OnCollapseAll()
    {
        foreach (var item in this.NavigationRoot.SubItems.SelectMany(headerItem => headerItem.SubItems))
        {
            item.ApplyExpansionRecursively(false);
        }
        return ValueTask.CompletedTask;
    }

    private void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        if (!TryGetActiveNavigationItem(out var activeItem, out var _)) return;

        this.NavigationRoot.EnsureExpandedTo(activeItem);
        this.StateHasChanged();
        this._NavigationService?.AddHistoryAsync(activeItem).AndLogException(this.Logger);
    }

    public void Dispose()
    {
        this.NavigationManager.LocationChanged -= this.NavigationManager_LocationChanged;
        this._Subscriptions.Dispose();
    }
}
