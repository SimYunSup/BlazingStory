@if (string.IsNullOrEmpty(this.Href))
{
    <button class="icon-button @GetCssClass()" title="@this.GetTitleText()" @onclick="this.ClickHandler">
        <SvgIcon Type="Icon" />
        @if (this.ChildContent != null)
        {
            <span class="text">@ChildContent</span>
        }
    </button>
}
else
{
    <a class="icon-button @GetCssClass()" title="@this.GetTitleText()" @onclick="this.ClickHandler" href="@this.Href" target="@this.Target">
        <SvgIcon Type="Icon" />
        @if (this.ChildContent != null)
        {
            <span class="text">@ChildContent</span>
        }
    </a>
}

@code {
    [Parameter]
    public SvgIconType Icon { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public Command? Command { get; set; }

    [Parameter]
    public string? Href { get; set; }

    [Parameter]
    public string? Target { get; set; }

    [Parameter]
    public bool FlagStyle { get; set; } = true;

    [Parameter]
    public bool Active { get; set; }

    private string GetCssClass()
    {
        var active = this.Active || (this.Command?.Flag ?? false == true);
        return $"{this.Class} {(active && this.FlagStyle ? "active" : "")}";
    }

    private string? GetTitleText()
    {
        if (string.IsNullOrEmpty(this.Title)) return this.Command?.GetTitleText();
        return string.Format(this.Title, this.Command?.GetHotKeyName());
    }

    private async Task ClickHandler(MouseEventArgs args)
    {
        var t1 = this.OnClick.InvokeAsync(args);
        if (this.Command != null) await this.Command.InvokeAsync();
        await t1;
    }
}