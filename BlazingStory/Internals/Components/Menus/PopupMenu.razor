@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div class="popup-menu @Class">

    <div @ref="_TriggerElement" class="popup-menu-trigger" @onclick="OpenPopup">
        @Trigger
    </div>

    @if (_PopupShown && _PopupPos != null)
    {
        <div class="popup-menu-holder" style="@this._PopupPosString">
            <div class="popup-menu-leader"></div>
            <div class="popup-menu-body">
                @MenuItems
            </div>
        </div>
    }
</div>

@code
{
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public RenderFragment? Trigger { get; set; }

    [Parameter]
    public RenderFragment? MenuItems { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HotKeysContext? _HotKeysContext;

    private ElementReference _TriggerElement;

    private bool _PopupShown = false;

    private Position? _PopupPos;

    private string _PopupPosString => this._PopupPos != null ? $"left:{this._PopupPos.X}px; top:{this._PopupPos.Y}px;" : "";

    private readonly Lazy<Task<IJSObjectReference>> _Module;

    private DotNetObjectReference<PopupMenu> _This;

    private IJSObjectReference? _EventSubscriber;

    public PopupMenu()
    {
        this._This = DotNetObjectReference.Create(this);
        this._Module = new(async () => await this.JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/BlazingStory/Internals/Components/Menus/PopupMenu.razor.js"));
    }

    private async Task OpenPopup()
    {
        if (this._PopupShown) return;

        var module = await this._Module.Value;
        var rect = await module.InvokeAsync<Rect>("getBoundingClientRect", this._TriggerElement);
        this._PopupPos = new() { X = rect.Left + rect.Width / 2, Y = rect.Bottom };
        this._EventSubscriber = await module.InvokeAsync<IJSObjectReference>("subscribeDocumentEvent", "click", this._This, nameof(ClosePopup), ".popup-menu-holder, .popup-menu-holder *");
        this._HotKeysContext = this.Services.GetRequiredService<HotKeys>().CreateContext().Add(Code.Escape, ClosePopup);
        this._PopupShown = true;
    }


    [JSInvokable(nameof(ClosePopup))]
    public async ValueTask ClosePopup()
    {
        await this.UnsubscribeEventAsync();
        if (this._PopupShown == false) return;
        this._PopupShown = false;
        this.StateHasChanged();
    }

    private async ValueTask UnsubscribeEventAsync()
    {
        this._HotKeysContext?.Dispose();
        this._HotKeysContext = null;

        if (this._EventSubscriber == null) return;
        await this._EventSubscriber.InvokeVoidAsync("dispose");
        await this._EventSubscriber.DisposeAsync();
        this._EventSubscriber = null;
    }

    public async ValueTask DisposeAsync()
    {
        await this.UnsubscribeEventAsync();
        this._This?.Dispose();
        if (!this._Module.IsValueCreated) return;
        try { await (await this._Module.Value).DisposeAsync(); } catch (JSDisconnectedException) { }
    }
}