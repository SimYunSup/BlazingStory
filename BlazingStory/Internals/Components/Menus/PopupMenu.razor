@implements IAsyncDisposable
@inject IJSRuntime JSRuntime

<div @ref="this._PopupMenuElement" class="popup-menu @Class">

    <div class="popup-menu-trigger">
        <div class="popup-menu-trigger-content" @onclick="OpenPopup">
            @Trigger
        </div>
        <div class="popup-menu-anchor">
            @if (_PopupShown)
            {
                <div class="popup-menu-holder" style="@this._PopupStylesString">
                    <div class="popup-menu-leader"></div>
                    <div class="popup-menu-body">
                        @MenuItems
                    </div>
                </div>
            }
        </div>
    </div>

</div>

@code
{
    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public int MarginTop { get; set; } = 0;

    [Parameter]
    public RenderFragment? Trigger { get; set; }

    [Parameter]
    public RenderFragment? MenuItems { get; set; }

    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HotKeysContext? _HotKeysContext;

    private ElementReference _PopupMenuElement;

    private bool _PopupShown = false;

    private string _PopupStylesString => $"margin-top:{this.MarginTop}px;";

    private readonly JSModule _JSModule;

    private DotNetObjectReference<PopupMenu> _This;

    private IJSObjectReference? _EventSubscriber;

    public PopupMenu()
    {
        this._This = DotNetObjectReference.Create(this);
        this._JSModule = new(() => this.JSRuntime, "Internals/Components/Menus/PopupMenu.razor.js");
    }

    private async Task OpenPopup()
    {
        if (this._PopupShown)
        {
            await this.ClosePopup();
            return;
        }

        this._EventSubscriber = await this._JSModule.InvokeAsync<IJSObjectReference>("subscribeDocumentEvent", "pointerdown", this._This, nameof(ClosePopup), this._PopupMenuElement);
        this._HotKeysContext = this.Services.GetRequiredService<HotKeys>().CreateContext().Add(Code.Escape, ClosePopup);
        this._PopupShown = true;
    }

    [JSInvokable(nameof(ClosePopup))]
    public async ValueTask ClosePopup()
    {
        await this.UnsubscribeEventAsync();
        if (this._PopupShown == false) return;
        this._PopupShown = false;
        this.StateHasChanged();
    }

    private async ValueTask UnsubscribeEventAsync()
    {
        this._HotKeysContext?.Dispose();
        this._HotKeysContext = null;

        if (this._EventSubscriber == null) return;
        await this._EventSubscriber.InvokeVoidIfConnectedAsync("dispose");
        await this._EventSubscriber.DisposeIfConnectedAsync();
        this._EventSubscriber = null;
    }

    public async ValueTask DisposeAsync()
    {
        await this.UnsubscribeEventAsync();
        await this._JSModule.DisposeAsync();
        this._This?.Dispose();
    }
}