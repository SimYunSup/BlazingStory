@inherits LayoutComponentBase
@using Toolbelt.Blazor.HotKeys2

<HeadContent>
    <link rel="stylesheet" href="_content/BlazingStory/css/styles.min.css" />
</HeadContent>

<SvgIcons />

@if (this._Ready)
{
    <PathQueryRouter>
        <SplitContainer Class="main-layout" @bind-FirstPaneSize="_SideBarSize" @bind-FirstPaneSize:after="OnSideBarSizeChanged" FirstPaneMinSize="210" SecondPaneMinSize="210">

            <FirstPane>
                <div class="sidebar-container fill">
                    <SideBar />
                </div>
            </FirstPane>

            <SecondPane>
                @Body
            </SecondPane>
        </SplitContainer>
    </PathQueryRouter>
}

@code
{
    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HelperScript HelperScript = default!;

    private int _SideBarSize = 210;

    private string SideBarSizeKeyName => this.GetType().Name + "." + nameof(_SideBarSize);

    private bool _Ready = false;

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await this.ConfigureCommandsAsync(this.Services);
        this._Ready = true;
        this.StateHasChanged();

        await this.HelperScript.SetupKeyDownReceiverAsync();
        this._SideBarSize = await this.HelperScript.GetLocalStorageItemAsync(this.SideBarSizeKeyName, this._SideBarSize);
        this.StateHasChanged();
    }

    private async ValueTask ConfigureCommandsAsync(IServiceProvider services)
    {
        var commandServce = services.GetRequiredService<CommandService>();
        await commandServce.AddCommandsAsync(new Command[]
        {
            new(CommandType.AddonPanelVisible, Code.A, "Show addons [{0}]", flag: true),
            new(CommandType.AddonPanelOrientation, Code.D, "Change addon orientation [{0}]"),
        });
    }

    private async Task OnSideBarSizeChanged()
    {
        await this.HelperScript.SetLocalStorageItemAsync(this.SideBarSizeKeyName, _SideBarSize);
    }
}