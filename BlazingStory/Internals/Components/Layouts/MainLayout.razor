@inherits LayoutComponentBase
@using Toolbelt.Blazor.HotKeys2

<HeadContent>
    <link rel="stylesheet" href="_content/BlazingStory/css/styles.min.css" />
</HeadContent>

<SvgIcons />

@if (this._Ready)
{
    <PathQueryRouter>
        <SplitContainer Class="main-layout" @bind-FirstPaneSize="_SideBarSize" @bind-FirstPaneSize:after="OnSideBarSizeChanged" FirstPaneMinSize="200" SecondPaneMinSize="210">

            <FirstPane>
                <div class="sidebar-container fill">
                    <SideBar />
                </div>
            </FirstPane>

            <SecondPane>
                @Body
            </SecondPane>
        </SplitContainer>
    </PathQueryRouter>
}

@code
{
    [CascadingParameter]
    internal IServiceProvider Services { get; init; } = default!;

    private HelperScript HelperScript = default!;

    private int _SideBarSize = 210;

    private string SideBarSizeKeyName => this.GetType().Name + "." + nameof(_SideBarSize);

    private bool _Ready = false;

    protected override void OnInitialized()
    {
        this.HelperScript = this.Services.GetRequiredService<HelperScript>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await this.ConfigureCommandsAsync(this.Services);
        this._Ready = true;
        this.StateHasChanged();

        await this.HelperScript.SetupKeyDownReceiverAsync();
        this._SideBarSize = await this.HelperScript.GetLocalStorageItemAsync(this.SideBarSizeKeyName, this._SideBarSize);
        this.StateHasChanged();
    }

    private async ValueTask ConfigureCommandsAsync(IServiceProvider services)
    {
        var commandServce = services.GetRequiredService<CommandService>();
        await commandServce.AddCommandsAsync(new Command[]
        {
            new(CommandType.AboutYourBlazingStory, default, "About your Blazing Story"),
            new(CommandType.ReleaseNotes, default, "Release notes"),
            new(CommandType.KeyboardShortcuts, new(Code.Comma), "Keyboard shortcuts"),

            new(CommandType.SideBarVisible, new(Code.S), "Show sidebar", flag: true),
            new(CommandType.ToolBarVisible, new(Code.T), "Show toolbar", flag: true),
            new(CommandType.AddonPanelVisible, new(Code.A), "Show addons", flag: true),
            new(CommandType.AddonPanelOrientation, new(Code.D), "Change addons orientation"),
            new(CommandType.GoFullScreen, new(Code.F), "Go full screen"),
            new(CommandType.GoSearch, new(Code.Slash), "Search"),
            new(CommandType.PreviousComponent, new(Code.ArrowUp), "Previous component"),
            new(CommandType.NextComponent, new(Code.ArrowDown), "Next component"),
            new(CommandType.PreviousStory, new(Code.ArrowLeft), "Previous Story"),
            new(CommandType.NextStory, new(Code.ArrowRight), "Next Story"),
            new(CommandType.CollapseAll, new(Code.ArrowUp), "Collapse All"),
        });
    }

    private async Task OnSideBarSizeChanged()
    {
        await this.HelperScript.SetLocalStorageItemAsync(this.SideBarSizeKeyName, _SideBarSize);
    }
}