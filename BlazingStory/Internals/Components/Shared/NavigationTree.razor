@if (this.Item != null)
{
    @foreach (var item in this.Item.SubItems)
    {
        var style = $"padding-left: {this.IndentLevel * 14}px;";
        var tabIndex = this.SubHeading ? "unset" : "-1";

        <div @key="item.Caption" class="navigation-tree-item @CssClass(new {item.Expanded, this.SubHeading, Type = item.Type.ToString() })">

            <div class="caption">
                @if (item.Type != NavigationTreeItemType.Story)
                {
                    <button class="action" tabindex="@tabIndex" @onclick="(() => ToggleItemExpansion(item))" style="@style">
                        <span class="chevron"></span>
                        <span class="icon">
                            <SvgIcon Type="GetIconType(item)" />
                        </span>
                        @item.Caption
                    </button>

                    @if (this.SubHeading)
                    {
                        <button class="sub-heading-action" @onclick="() => item.ToggleSubItemsExpansion()">
                            <SvgIcon Type="GetSubHeadingActionIconType(item)" />
                        </button>
                    }
                }
                else
                {
                    <a href="./?path=/story/foo--bar" class="action" tabindex="@tabIndex" @onclick="(() => ToggleItemExpansion(item))" style="@style">

                        <span class="chevron"></span>
                        <span class="icon">
                            <SvgIcon Type="GetIconType(item)" />
                        </span>
                        @item.Caption

                    </a>
                }
            </div>

            <div class="sub-items">
                <NavigationTree Item="item" IndentLevel="@(this.SubHeading ? this.IndentLevel : this.IndentLevel + 1)" ExpansionChanged="(() => this.ExpansionChanged.InvokeAsync())" />
            </div>
        </div>
    }
}

@code {
    [Parameter, EditorRequired]
    public NavigationTreeItem? Item { get; set; }

    [Parameter]
    public bool SubHeading { get; set; }

    [Parameter]
    public int IndentLevel { get; set; }

    [Parameter]
    public EventCallback ExpansionChanged { get; set; }

    private async Task ToggleItemExpansion(NavigationTreeItem item)
    {
        item.Expanded = !item.Expanded;
        await ExpansionChanged.InvokeAsync();

        if (Item != null && Item.SubItems.FirstOrDefault() != null)
            Console.WriteLine($"IsExpandedAll: {Item.SubItems.First().IsExpandedAll}");
    }

    private SvgIconType GetIconType(NavigationTreeItem item)
    {
        return item.Type switch
        {
            NavigationTreeItemType.StoryCollection => SvgIconType.Component,
            NavigationTreeItemType.Story => SvgIconType.BookmarkHollow,
            _ => SvgIconType.Folder
        };
    }

    private SvgIconType GetSubHeadingActionIconType(NavigationTreeItem item)
    {
        return item.IsExpandedAll ? SvgIconType.CollapseAll : SvgIconType.ExpandAll;
    }
}
