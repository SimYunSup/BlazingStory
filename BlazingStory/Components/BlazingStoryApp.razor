@using System.Reflection
@using Toolbelt.Blazor.Extensions.DependencyInjection
@inject IJSRuntime JSRuntime
@inject ILoggerFactory LoggerFactory

<StoriesDetector Assemblies="this.Assemblies" StoriesStore="this._StoriesStore" />

<CascadingValue Value="this._ServiceProvider">
    <CascadingValue Value="this._AddonsStore">

        <div style="display:none;">
            @foreach (var addonType in this._AddonsTypes)
            {
                <DynamicComponent @key="addonType" Type="addonType" />
            }
        </div>

        <div style="transition: opacity 0.2s linear; opacity: @(this._InitLevel >=2 ? 1 : 0); display: @(this._InitLevel >= 1 ? "block" : "none");">
            <CascadingValue Value="this._StoriesStore">
                <Router AppAssembly="@typeof(BlazingStoryApp).Assembly">
                    <Found Context="routeData">
                        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                    </Found>
                    <NotFound>
                        <PageTitle>Not found</PageTitle>
                        <LayoutView Layout="@typeof(MainLayout)">
                            <p role="alert" style="padding:12px 32px;">Sorry, there's nothing at this address.</p>
                        </LayoutView>
                    </NotFound>
                </Router>
            </CascadingValue>
        </div>

    </CascadingValue>
</CascadingValue>

@code
{
    internal readonly static string Title = "Blazing Story";

    [Parameter, EditorRequired]
    public IEnumerable<Assembly>? Assemblies { get; set; }

    private readonly StoriesStore _StoriesStore = new();

    private readonly AddonsStore _AddonsStore = new();

    private int _InitLevel = 0;

    private IServiceProvider? _ServiceProvider;

    private readonly IEnumerable<Type> _AddonsTypes = new Type[]
    {
        typeof(BlazingStory.Internals.Pages.Canvas.Addons.Background.BackgroundAddon),
        typeof(BlazingStory.Internals.Pages.Canvas.Addons.Grid.GridAddon),
        typeof(BlazingStory.Internals.Pages.Canvas.Addons.ChangeSize.ChangeSizeAddon),
        typeof(BlazingStory.Internals.Pages.Canvas.Addons.Measure.MeasureAddon),
        typeof(BlazingStory.Internals.Pages.Canvas.Addons.Outlines.OutlinesAddon),
    };

    protected override void OnInitialized()
    {
        this._ServiceProvider = this.ConfigureServices();
    }

    private IServiceProvider ConfigureServices()
    {
        return new ServiceCollection()
            .AddSingleton<IJSRuntime>(_ => this.JSRuntime)
            .AddSingleton<ILoggerFactory>(_ => LoggerFactory)
            .AddSingleton(typeof(ILogger<>), typeof(Logger<>))
            .AddHotKeys2()
            .AddSingleton<HelperScript>()
            .AddSingleton<CommandService>()
            .AddSingleton<AddonsStore>(_ => this._AddonsStore)
            .BuildServiceProvider();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Task.Delay(50);
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(50);
        this._InitLevel++;
        this.StateHasChanged();
    }
}