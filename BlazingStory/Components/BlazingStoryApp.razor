@using System.Reflection
@using Toolbelt.Blazor.HotKeys2
@using Toolbelt.Blazor.Extensions.DependencyInjection
@inject IJSRuntime JSRuntime
@inject ILoggerFactory LoggerFactory

<StoriesDetector Assemblies="this.Assemblies" StoriesStore="this._StoriesStore" />

<div style="transition: opacity 0.2s linear; opacity: @(this._InitLevel >=2 ? 1 : 0); display: @(this._InitLevel >= 1 ? "block" : "none");">
    <CascadingValue Value="this._ServiceProvider">
        <CascadingValue Value="this._StoriesStore">
            <Router AppAssembly="@typeof(BlazingStoryApp).Assembly">
                <Found Context="routeData">
                    <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                </Found>
                <NotFound>
                    <PageTitle>Not found</PageTitle>
                    <LayoutView Layout="@typeof(MainLayout)">
                        <p role="alert">Sorry, there's nothing at this address.</p>
                    </LayoutView>
                </NotFound>
            </Router>
        </CascadingValue>
    </CascadingValue>
</div>

@code
{
    internal readonly static string Title = "Blazing Story";

    [Parameter, EditorRequired]
    public IEnumerable<Assembly>? Assemblies { get; set; }

    private StoriesStore _StoriesStore = new();

    private int _InitLevel = 0;

    private IServiceProvider? _ServiceProvider;

    protected override void OnInitialized()
    {
        this._ServiceProvider = this.ConfigureServices();
        this.ConfigureCommands(this._ServiceProvider);
    }

    private IServiceProvider ConfigureServices()
    {
        return new ServiceCollection()
            .AddSingleton<IJSRuntime>(_ => this.JSRuntime)
            .AddSingleton<ILoggerFactory>(_ => LoggerFactory)
            .AddSingleton(typeof(ILogger<>), typeof(Logger<>))
            .AddHotKeys2()
            .AddSingleton<HelperScript>()
            .AddSingleton<CommandService>()
            .BuildServiceProvider();
    }

    private void ConfigureCommands(IServiceProvider services)
    {
        var commandServce = services.GetRequiredService<CommandService>();
        commandServce.AddCommands(new Command[]
        {
            new(CommandType.OpenAddonPanel),
            new(CommandType.CloseAddonPanel),
            new(CommandType.ToggleAddonPanelOrientation, Code.D),
        });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        await Task.Delay(50);
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(50);
        this._InitLevel++;
        this.StateHasChanged();
    }
}