@using System.Reflection
@using BlazingStory.Internals.Services.XmlDocComment;
@using Toolbelt.Blazor.Extensions.DependencyInjection
@implements IAsyncDisposable
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject ILoggerFactory LoggerFactory
@inject NavigationManager NavigationManager

<style>
    .default-background {
        position: fixed;
        inset: 0;
        background-color: #f6f9fc;
    }

    @@media (prefers-color-scheme: dark) {
        .default-background {
            background-color: #222425;
        }
    }

    .default-background.init-level-3 {
        display: none;
    }
</style>
<div class="default-background init-level-@(this._InitLevel)"></div>

<CascadingValue Value="this._ServiceProvider">

    <StoriesRazorDetector Assemblies="this.Assemblies" StoriesStore="this._StoriesStore" />

    <CascadingValue Value="this._AddonsStore">

        <div style="display:none;">
            @foreach (var addonType in this._AddonsTypes)
            {
                <DynamicComponent @key="addonType" Type="addonType" />
            }
        </div>

        <div class="color-scheme-container preferes-color-scheme-@this._PreferesColorScheme" style="transition: opacity 0.2s linear; opacity: @(this._InitLevel >=2 ? 1 : 0); display: @(this._InitLevel >= 1 ? "block" : "none");">
            <CascadingValue Value="this._StoriesStore">
                <CascadingValue Value="this.DefaultLayout" Name="DefaultLayout">

                    <Router AppAssembly="@typeof(BlazingStoryApp).Assembly">
                        <Found Context="routeData">
                            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                        </Found>
                        <NotFound>
                            <PageTitle>Not found</PageTitle>
                            <LayoutView Layout="@typeof(MainLayout)">
                                <p role="alert" style="padding:12px 32px;">Sorry, there's nothing at this address.</p>
                            </LayoutView>
                        </NotFound>
                    </Router>

                </CascadingValue>
            </CascadingValue>
        </div>

    </CascadingValue>
</CascadingValue>

@code
{
    internal readonly static string Title = "Blazing Story";

    [Parameter, EditorRequired]
    public IEnumerable<Assembly>? Assemblies { get; set; }

    /// <summary>
    /// A type of the default layout component to use when displaying a story.
    /// </summary>
    [Parameter]
    public Type? DefaultLayout { get; set; }

    private readonly StoriesStore _StoriesStore = new();

    private readonly AddonsStore _AddonsStore = new();

    private int _InitLevel = 0;

    private IServiceProvider? _ServiceProvider;

    private readonly JSModule _JSModule;

    private DotNetObjectReference<BlazingStoryApp> _RefThis;

    private string _PreferesColorScheme = "light";

    private int _PreferesColorSchemeChangeSubscribeId = 0;

    public BlazingStoryApp()
    {
        this._JSModule = new(() => this.JSRuntime, "Components/BlazingStoryApp.razor.js");
        this._RefThis = DotNetObjectReference.Create(this);
    }

    private readonly IEnumerable<Type> _AddonsTypes = new Type[]
    {
        typeof(BlazingStory.Internals.Addons.Background.BackgroundAddon),
        typeof(BlazingStory.Internals.Addons.Grid.GridAddon),
        typeof(BlazingStory.Internals.Addons.ChangeSize.ChangeSizeAddon),
        typeof(BlazingStory.Internals.Addons.Measure.MeasureAddon),
        typeof(BlazingStory.Internals.Addons.Outlines.OutlinesAddon),
    };

    protected override void OnInitialized()
    {
        this._ServiceProvider = this.ConfigureServices();
    }

    private IServiceProvider ConfigureServices()
    {
        return new ServiceCollection()
            .AddSingleton<IJSRuntime>(_ => this.JSRuntime)
            .AddSingleton<ILoggerFactory>(_ => LoggerFactory)
            .AddSingleton(typeof(ILogger<>), typeof(Logger<>))
            .AddSingleton<HttpClient>(_ => this.HttpClient)
            .AddSingleton<NavigationManager>(_ => this.NavigationManager)
            .AddHotKeys2()
            .AddSingleton<HelperScript>()
            .AddSingleton<CommandService>()
            .AddSingleton<NavigationService>()
            .AddSingleton<AddonsStore>(_ => this._AddonsStore)
            .AddSingleton<IXmlDocComment, XmlDocCommentForWasm>()
            .BuildServiceProvider();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        this._PreferesColorScheme = await this._JSModule.InvokeAsync<string>("getPrefersColorScheme");
        this._PreferesColorSchemeChangeSubscribeId = await this._JSModule.InvokeAsync<int>("subscribePreferesColorSchemeChanged", this._RefThis, nameof(OnPreferesColorSchemeChanged));

        await this._JSModule.InvokeVoidAsync("waitForAllStyleAndFontsAreLoaded");
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(50);
        this._InitLevel++;
        this.StateHasChanged();

        await Task.Delay(200);
        this._InitLevel++;
        this.StateHasChanged();
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void OnPreferesColorSchemeChanged(string preferesColorScheme)
    {
        this._PreferesColorScheme = preferesColorScheme;
        this.StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (this._PreferesColorSchemeChangeSubscribeId != 0)
        {
            await this._JSModule.InvokeVoidAsync("unsubscribePreferesColorSchemeChanged", this._PreferesColorSchemeChangeSubscribeId);
            this._PreferesColorSchemeChangeSubscribeId = 0;
        }
        this._RefThis.Dispose();
        await _JSModule.DisposeAsync();
    }
}