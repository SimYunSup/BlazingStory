@if (Item != null)
{
    <div class="@("todo-list-item" + (Item.IsDone ? " done" : "" ))">
        <input type="checkbox" checked="@Item.IsDone" @onchange="@(() => OnClickDone.InvokeAsync(Item.Id))" />
        <span class="todo-list-item-title">@Item.Title</span>
        <IconButton Icon="Icon.Delete" OnClick="@(() => OnClickRemove.InvokeAsync(Item.Id))" />
    </div>
}

@code
{
    /// <summary>
    /// Gets or sets the ToDo item to display.
    /// </summary>
    [Parameter, EditorRequired]
    public ToDoItem? Item { get; set; }

    /// <summary>
    /// Gets or sets the callback that is invoked when the completion status of the ToDo item changes, with the Id of the ToDo item as an argument.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnClickDone { get; set; }

    /// <summary>
    /// Gets or sets the callback that is invoked when the delete button of the ToDo item is clicked, with the Id of the ToDo item as an argument.
    /// </summary>
    [Parameter]
    public EventCallback<int> OnClickRemove { get; set; }
}